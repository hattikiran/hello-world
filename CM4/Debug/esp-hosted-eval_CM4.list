
esp-hosted-eval_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015a8  08100298  08100298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08101840  08101840  00011840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08101850  08101850  00011850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08101854  08101854  00011854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  10000000  08101858  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000006c  10000010  08101868  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  1000007c  08101868  0002007c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000dd06  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001d0b  00000000  00000000  0002dd46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000ca0  00000000  00000000  0002fa58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000bb8  00000000  00000000  000306f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003ebaf  00000000  00000000  000312b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000e8d2  00000000  00000000  0006fe5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00199ab0  00000000  00000000  0007e731  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  002181e1  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000033d4  00000000  00000000  00218234  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000010 	.word	0x10000010
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08101828 	.word	0x08101828

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000014 	.word	0x10000014
 81002d4:	08101828 	.word	0x08101828

081002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002d8:	b480      	push	{r7}
 81002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002dc:	4b0b      	ldr	r3, [pc, #44]	; (810030c <SystemInit+0x34>)
 81002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81002e2:	4a0a      	ldr	r2, [pc, #40]	; (810030c <SystemInit+0x34>)
 81002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002ec:	4b07      	ldr	r3, [pc, #28]	; (810030c <SystemInit+0x34>)
 81002ee:	691b      	ldr	r3, [r3, #16]
 81002f0:	4a06      	ldr	r2, [pc, #24]	; (810030c <SystemInit+0x34>)
 81002f2:	f043 0310 	orr.w	r3, r3, #16
 81002f6:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 81002f8:	4b04      	ldr	r3, [pc, #16]	; (810030c <SystemInit+0x34>)
 81002fa:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 81002fe:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8100300:	bf00      	nop
 8100302:	46bd      	mov	sp, r7
 8100304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100308:	4770      	bx	lr
 810030a:	bf00      	nop
 810030c:	e000ed00 	.word	0xe000ed00

08100310 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8100310:	b580      	push	{r7, lr}
 8100312:	b086      	sub	sp, #24
 8100314:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100316:	1d3b      	adds	r3, r7, #4
 8100318:	2200      	movs	r2, #0
 810031a:	601a      	str	r2, [r3, #0]
 810031c:	605a      	str	r2, [r3, #4]
 810031e:	609a      	str	r2, [r3, #8]
 8100320:	60da      	str	r2, [r3, #12]
 8100322:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8100324:	4b12      	ldr	r3, [pc, #72]	; (8100370 <MX_GPIO_Init+0x60>)
 8100326:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810032a:	4a11      	ldr	r2, [pc, #68]	; (8100370 <MX_GPIO_Init+0x60>)
 810032c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8100330:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100334:	4b0e      	ldr	r3, [pc, #56]	; (8100370 <MX_GPIO_Init+0x60>)
 8100336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810033a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 810033e:	603b      	str	r3, [r7, #0]
 8100340:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8100342:	2200      	movs	r2, #0
 8100344:	2160      	movs	r1, #96	; 0x60
 8100346:	480b      	ldr	r0, [pc, #44]	; (8100374 <MX_GPIO_Init+0x64>)
 8100348:	f000 fc9e 	bl	8100c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PKPin PKPin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin;
 810034c:	2360      	movs	r3, #96	; 0x60
 810034e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8100350:	2301      	movs	r3, #1
 8100352:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100354:	2300      	movs	r3, #0
 8100356:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100358:	2300      	movs	r3, #0
 810035a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 810035c:	1d3b      	adds	r3, r7, #4
 810035e:	4619      	mov	r1, r3
 8100360:	4804      	ldr	r0, [pc, #16]	; (8100374 <MX_GPIO_Init+0x64>)
 8100362:	f000 fae1 	bl	8100928 <HAL_GPIO_Init>

}
 8100366:	bf00      	nop
 8100368:	3718      	adds	r7, #24
 810036a:	46bd      	mov	sp, r7
 810036c:	bd80      	pop	{r7, pc}
 810036e:	bf00      	nop
 8100370:	58024400 	.word	0x58024400
 8100374:	58022800 	.word	0x58022800

08100378 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100378:	b580      	push	{r7, lr}
 810037a:	b082      	sub	sp, #8
 810037c:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810037e:	4b21      	ldr	r3, [pc, #132]	; (8100404 <main+0x8c>)
 8100380:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100384:	4a1f      	ldr	r2, [pc, #124]	; (8100404 <main+0x8c>)
 8100386:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810038a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810038e:	4b1d      	ldr	r3, [pc, #116]	; (8100404 <main+0x8c>)
 8100390:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100398:	607b      	str	r3, [r7, #4]
 810039a:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810039c:	2001      	movs	r0, #1
 810039e:	f000 fca7 	bl	8100cf0 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 81003a2:	f000 fd31 	bl	8100e08 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 81003a6:	2201      	movs	r2, #1
 81003a8:	2102      	movs	r1, #2
 81003aa:	2000      	movs	r0, #0
 81003ac:	f000 fcb2 	bl	8100d14 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81003b0:	4b15      	ldr	r3, [pc, #84]	; (8100408 <main+0x90>)
 81003b2:	681b      	ldr	r3, [r3, #0]
 81003b4:	091b      	lsrs	r3, r3, #4
 81003b6:	f003 030f 	and.w	r3, r3, #15
 81003ba:	2b07      	cmp	r3, #7
 81003bc:	d108      	bne.n	81003d0 <main+0x58>
 81003be:	4b13      	ldr	r3, [pc, #76]	; (810040c <main+0x94>)
 81003c0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 81003c4:	4a11      	ldr	r2, [pc, #68]	; (810040c <main+0x94>)
 81003c6:	f043 0301 	orr.w	r3, r3, #1
 81003ca:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 81003ce:	e007      	b.n	81003e0 <main+0x68>
 81003d0:	4b0e      	ldr	r3, [pc, #56]	; (810040c <main+0x94>)
 81003d2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 81003d6:	4a0d      	ldr	r2, [pc, #52]	; (810040c <main+0x94>)
 81003d8:	f043 0301 	orr.w	r3, r3, #1
 81003dc:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81003e0:	f000 f90c 	bl	81005fc <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81003e4:	f7ff ff94 	bl	8100310 <MX_GPIO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 81003e8:	2120      	movs	r1, #32
 81003ea:	4809      	ldr	r0, [pc, #36]	; (8100410 <main+0x98>)
 81003ec:	f000 fc65 	bl	8100cba <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 81003f0:	2140      	movs	r1, #64	; 0x40
 81003f2:	4807      	ldr	r0, [pc, #28]	; (8100410 <main+0x98>)
 81003f4:	f000 fc61 	bl	8100cba <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 81003f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 81003fc:	f000 f97c 	bl	81006f8 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8100400:	e7f2      	b.n	81003e8 <main+0x70>
 8100402:	bf00      	nop
 8100404:	58024400 	.word	0x58024400
 8100408:	e000ed00 	.word	0xe000ed00
 810040c:	58026400 	.word	0x58026400
 8100410:	58022800 	.word	0x58022800

08100414 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8100414:	b580      	push	{r7, lr}
 8100416:	b082      	sub	sp, #8
 8100418:	af00      	add	r7, sp, #0
 810041a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 810041c:	687b      	ldr	r3, [r7, #4]
 810041e:	681b      	ldr	r3, [r3, #0]
 8100420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8100424:	d101      	bne.n	810042a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8100426:	f000 f947 	bl	81006b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 810042a:	bf00      	nop
 810042c:	3708      	adds	r7, #8
 810042e:	46bd      	mov	sp, r7
 8100430:	bd80      	pop	{r7, pc}
	...

08100434 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100434:	b480      	push	{r7}
 8100436:	b083      	sub	sp, #12
 8100438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 810043a:	4b0a      	ldr	r3, [pc, #40]	; (8100464 <HAL_MspInit+0x30>)
 810043c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100440:	4a08      	ldr	r2, [pc, #32]	; (8100464 <HAL_MspInit+0x30>)
 8100442:	f043 0302 	orr.w	r3, r3, #2
 8100446:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 810044a:	4b06      	ldr	r3, [pc, #24]	; (8100464 <HAL_MspInit+0x30>)
 810044c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100450:	f003 0302 	and.w	r3, r3, #2
 8100454:	607b      	str	r3, [r7, #4]
 8100456:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100458:	bf00      	nop
 810045a:	370c      	adds	r7, #12
 810045c:	46bd      	mov	sp, r7
 810045e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100462:	4770      	bx	lr
 8100464:	58024400 	.word	0x58024400

08100468 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100468:	b580      	push	{r7, lr}
 810046a:	b090      	sub	sp, #64	; 0x40
 810046c:	af00      	add	r7, sp, #0
 810046e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM2 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8100470:	687b      	ldr	r3, [r7, #4]
 8100472:	2b0f      	cmp	r3, #15
 8100474:	d827      	bhi.n	81004c6 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0U);
 8100476:	2200      	movs	r2, #0
 8100478:	6879      	ldr	r1, [r7, #4]
 810047a:	201c      	movs	r0, #28
 810047c:	f000 fa18 	bl	81008b0 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8100480:	201c      	movs	r0, #28
 8100482:	f000 fa2f 	bl	81008e4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8100486:	4a29      	ldr	r2, [pc, #164]	; (810052c <HAL_InitTick+0xc4>)
 8100488:	687b      	ldr	r3, [r7, #4]
 810048a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 810048c:	4b28      	ldr	r3, [pc, #160]	; (8100530 <HAL_InitTick+0xc8>)
 810048e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100492:	4a27      	ldr	r2, [pc, #156]	; (8100530 <HAL_InitTick+0xc8>)
 8100494:	f043 0301 	orr.w	r3, r3, #1
 8100498:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 810049c:	4b24      	ldr	r3, [pc, #144]	; (8100530 <HAL_InitTick+0xc8>)
 810049e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81004a2:	f003 0301 	and.w	r3, r3, #1
 81004a6:	60fb      	str	r3, [r7, #12]
 81004a8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 81004aa:	f107 0210 	add.w	r2, r7, #16
 81004ae:	f107 0314 	add.w	r3, r7, #20
 81004b2:	4611      	mov	r1, r2
 81004b4:	4618      	mov	r0, r3
 81004b6:	f000 fe77 	bl	81011a8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 81004ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81004bc:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 81004be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81004c0:	2b00      	cmp	r3, #0
 81004c2:	d106      	bne.n	81004d2 <HAL_InitTick+0x6a>
 81004c4:	e001      	b.n	81004ca <HAL_InitTick+0x62>
    return HAL_ERROR;
 81004c6:	2301      	movs	r3, #1
 81004c8:	e02c      	b.n	8100524 <HAL_InitTick+0xbc>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 81004ca:	f000 fe57 	bl	810117c <HAL_RCC_GetPCLK1Freq>
 81004ce:	63f8      	str	r0, [r7, #60]	; 0x3c
 81004d0:	e004      	b.n	81004dc <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 81004d2:	f000 fe53 	bl	810117c <HAL_RCC_GetPCLK1Freq>
 81004d6:	4603      	mov	r3, r0
 81004d8:	005b      	lsls	r3, r3, #1
 81004da:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 81004dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81004de:	4a15      	ldr	r2, [pc, #84]	; (8100534 <HAL_InitTick+0xcc>)
 81004e0:	fba2 2303 	umull	r2, r3, r2, r3
 81004e4:	0c9b      	lsrs	r3, r3, #18
 81004e6:	3b01      	subs	r3, #1
 81004e8:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 81004ea:	4b13      	ldr	r3, [pc, #76]	; (8100538 <HAL_InitTick+0xd0>)
 81004ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 81004f0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 81004f2:	4b11      	ldr	r3, [pc, #68]	; (8100538 <HAL_InitTick+0xd0>)
 81004f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 81004f8:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 81004fa:	4a0f      	ldr	r2, [pc, #60]	; (8100538 <HAL_InitTick+0xd0>)
 81004fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81004fe:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8100500:	4b0d      	ldr	r3, [pc, #52]	; (8100538 <HAL_InitTick+0xd0>)
 8100502:	2200      	movs	r2, #0
 8100504:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100506:	4b0c      	ldr	r3, [pc, #48]	; (8100538 <HAL_InitTick+0xd0>)
 8100508:	2200      	movs	r2, #0
 810050a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 810050c:	480a      	ldr	r0, [pc, #40]	; (8100538 <HAL_InitTick+0xd0>)
 810050e:	f000 fe8d 	bl	810122c <HAL_TIM_Base_Init>
 8100512:	4603      	mov	r3, r0
 8100514:	2b00      	cmp	r3, #0
 8100516:	d104      	bne.n	8100522 <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8100518:	4807      	ldr	r0, [pc, #28]	; (8100538 <HAL_InitTick+0xd0>)
 810051a:	f000 fee9 	bl	81012f0 <HAL_TIM_Base_Start_IT>
 810051e:	4603      	mov	r3, r0
 8100520:	e000      	b.n	8100524 <HAL_InitTick+0xbc>
  }

  /* Return function status */
  return HAL_ERROR;
 8100522:	2301      	movs	r3, #1
}
 8100524:	4618      	mov	r0, r3
 8100526:	3740      	adds	r7, #64	; 0x40
 8100528:	46bd      	mov	sp, r7
 810052a:	bd80      	pop	{r7, pc}
 810052c:	10000008 	.word	0x10000008
 8100530:	58024400 	.word	0x58024400
 8100534:	431bde83 	.word	0x431bde83
 8100538:	1000002c 	.word	0x1000002c

0810053c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 810053c:	b480      	push	{r7}
 810053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8100540:	e7fe      	b.n	8100540 <NMI_Handler+0x4>

08100542 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100542:	b480      	push	{r7}
 8100544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100546:	e7fe      	b.n	8100546 <HardFault_Handler+0x4>

08100548 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100548:	b480      	push	{r7}
 810054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 810054c:	e7fe      	b.n	810054c <MemManage_Handler+0x4>

0810054e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 810054e:	b480      	push	{r7}
 8100550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8100552:	e7fe      	b.n	8100552 <BusFault_Handler+0x4>

08100554 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100554:	b480      	push	{r7}
 8100556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100558:	e7fe      	b.n	8100558 <UsageFault_Handler+0x4>

0810055a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 810055a:	b480      	push	{r7}
 810055c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 810055e:	bf00      	nop
 8100560:	46bd      	mov	sp, r7
 8100562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100566:	4770      	bx	lr

08100568 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100568:	b480      	push	{r7}
 810056a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810056c:	bf00      	nop
 810056e:	46bd      	mov	sp, r7
 8100570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100574:	4770      	bx	lr

08100576 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8100576:	b480      	push	{r7}
 8100578:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 810057a:	bf00      	nop
 810057c:	46bd      	mov	sp, r7
 810057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100582:	4770      	bx	lr

08100584 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8100584:	b480      	push	{r7}
 8100586:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8100588:	bf00      	nop
 810058a:	46bd      	mov	sp, r7
 810058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100590:	4770      	bx	lr
	...

08100594 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8100594:	b580      	push	{r7, lr}
 8100596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8100598:	4802      	ldr	r0, [pc, #8]	; (81005a4 <TIM2_IRQHandler+0x10>)
 810059a:	f000 ff21 	bl	81013e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 810059e:	bf00      	nop
 81005a0:	bd80      	pop	{r7, pc}
 81005a2:	bf00      	nop
 81005a4:	1000002c 	.word	0x1000002c

081005a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81005a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 81005e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81005ac:	f7ff fe94 	bl	81002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81005b0:	480c      	ldr	r0, [pc, #48]	; (81005e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81005b2:	490d      	ldr	r1, [pc, #52]	; (81005e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81005b4:	4a0d      	ldr	r2, [pc, #52]	; (81005ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 81005b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81005b8:	e002      	b.n	81005c0 <LoopCopyDataInit>

081005ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81005ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81005bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81005be:	3304      	adds	r3, #4

081005c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81005c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81005c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81005c4:	d3f9      	bcc.n	81005ba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81005c6:	4a0a      	ldr	r2, [pc, #40]	; (81005f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81005c8:	4c0a      	ldr	r4, [pc, #40]	; (81005f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 81005ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 81005cc:	e001      	b.n	81005d2 <LoopFillZerobss>

081005ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81005ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81005d0:	3204      	adds	r2, #4

081005d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81005d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81005d4:	d3fb      	bcc.n	81005ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81005d6:	f001 f903 	bl	81017e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81005da:	f7ff fecd 	bl	8100378 <main>
  bx  lr
 81005de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81005e0:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81005e4:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81005e8:	10000010 	.word	0x10000010
  ldr r2, =_sidata
 81005ec:	08101858 	.word	0x08101858
  ldr r2, =_sbss
 81005f0:	10000010 	.word	0x10000010
  ldr r4, =_ebss
 81005f4:	1000007c 	.word	0x1000007c

081005f8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81005f8:	e7fe      	b.n	81005f8 <ADC3_IRQHandler>
	...

081005fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81005fc:	b580      	push	{r7, lr}
 81005fe:	b082      	sub	sp, #8
 8100600:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8100602:	4b28      	ldr	r3, [pc, #160]	; (81006a4 <HAL_Init+0xa8>)
 8100604:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100608:	4a26      	ldr	r2, [pc, #152]	; (81006a4 <HAL_Init+0xa8>)
 810060a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 810060e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8100612:	4b24      	ldr	r3, [pc, #144]	; (81006a4 <HAL_Init+0xa8>)
 8100614:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100618:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810061c:	603b      	str	r3, [r7, #0]
 810061e:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8100620:	4b21      	ldr	r3, [pc, #132]	; (81006a8 <HAL_Init+0xac>)
 8100622:	681b      	ldr	r3, [r3, #0]
 8100624:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8100628:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 810062c:	4a1e      	ldr	r2, [pc, #120]	; (81006a8 <HAL_Init+0xac>)
 810062e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8100632:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8100634:	4b1c      	ldr	r3, [pc, #112]	; (81006a8 <HAL_Init+0xac>)
 8100636:	681b      	ldr	r3, [r3, #0]
 8100638:	4a1b      	ldr	r2, [pc, #108]	; (81006a8 <HAL_Init+0xac>)
 810063a:	f043 0301 	orr.w	r3, r3, #1
 810063e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100640:	2003      	movs	r0, #3
 8100642:	f000 f92a 	bl	810089a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8100646:	f000 fbed 	bl	8100e24 <HAL_RCC_GetSysClockFreq>
 810064a:	4602      	mov	r2, r0
 810064c:	4b15      	ldr	r3, [pc, #84]	; (81006a4 <HAL_Init+0xa8>)
 810064e:	699b      	ldr	r3, [r3, #24]
 8100650:	0a1b      	lsrs	r3, r3, #8
 8100652:	f003 030f 	and.w	r3, r3, #15
 8100656:	4915      	ldr	r1, [pc, #84]	; (81006ac <HAL_Init+0xb0>)
 8100658:	5ccb      	ldrb	r3, [r1, r3]
 810065a:	f003 031f 	and.w	r3, r3, #31
 810065e:	fa22 f303 	lsr.w	r3, r2, r3
 8100662:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100664:	4b0f      	ldr	r3, [pc, #60]	; (81006a4 <HAL_Init+0xa8>)
 8100666:	699b      	ldr	r3, [r3, #24]
 8100668:	f003 030f 	and.w	r3, r3, #15
 810066c:	4a0f      	ldr	r2, [pc, #60]	; (81006ac <HAL_Init+0xb0>)
 810066e:	5cd3      	ldrb	r3, [r2, r3]
 8100670:	f003 031f 	and.w	r3, r3, #31
 8100674:	687a      	ldr	r2, [r7, #4]
 8100676:	fa22 f303 	lsr.w	r3, r2, r3
 810067a:	4a0d      	ldr	r2, [pc, #52]	; (81006b0 <HAL_Init+0xb4>)
 810067c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810067e:	4b0c      	ldr	r3, [pc, #48]	; (81006b0 <HAL_Init+0xb4>)
 8100680:	681b      	ldr	r3, [r3, #0]
 8100682:	4a0c      	ldr	r2, [pc, #48]	; (81006b4 <HAL_Init+0xb8>)
 8100684:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8100686:	200f      	movs	r0, #15
 8100688:	f7ff feee 	bl	8100468 <HAL_InitTick>
 810068c:	4603      	mov	r3, r0
 810068e:	2b00      	cmp	r3, #0
 8100690:	d001      	beq.n	8100696 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8100692:	2301      	movs	r3, #1
 8100694:	e002      	b.n	810069c <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8100696:	f7ff fecd 	bl	8100434 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810069a:	2300      	movs	r3, #0
}
 810069c:	4618      	mov	r0, r3
 810069e:	3708      	adds	r7, #8
 81006a0:	46bd      	mov	sp, r7
 81006a2:	bd80      	pop	{r7, pc}
 81006a4:	58024400 	.word	0x58024400
 81006a8:	40024400 	.word	0x40024400
 81006ac:	08101840 	.word	0x08101840
 81006b0:	10000004 	.word	0x10000004
 81006b4:	10000000 	.word	0x10000000

081006b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81006b8:	b480      	push	{r7}
 81006ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81006bc:	4b06      	ldr	r3, [pc, #24]	; (81006d8 <HAL_IncTick+0x20>)
 81006be:	781b      	ldrb	r3, [r3, #0]
 81006c0:	461a      	mov	r2, r3
 81006c2:	4b06      	ldr	r3, [pc, #24]	; (81006dc <HAL_IncTick+0x24>)
 81006c4:	681b      	ldr	r3, [r3, #0]
 81006c6:	4413      	add	r3, r2
 81006c8:	4a04      	ldr	r2, [pc, #16]	; (81006dc <HAL_IncTick+0x24>)
 81006ca:	6013      	str	r3, [r2, #0]
}
 81006cc:	bf00      	nop
 81006ce:	46bd      	mov	sp, r7
 81006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006d4:	4770      	bx	lr
 81006d6:	bf00      	nop
 81006d8:	1000000c 	.word	0x1000000c
 81006dc:	10000078 	.word	0x10000078

081006e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81006e0:	b480      	push	{r7}
 81006e2:	af00      	add	r7, sp, #0
  return uwTick;
 81006e4:	4b03      	ldr	r3, [pc, #12]	; (81006f4 <HAL_GetTick+0x14>)
 81006e6:	681b      	ldr	r3, [r3, #0]
}
 81006e8:	4618      	mov	r0, r3
 81006ea:	46bd      	mov	sp, r7
 81006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006f0:	4770      	bx	lr
 81006f2:	bf00      	nop
 81006f4:	10000078 	.word	0x10000078

081006f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 81006f8:	b580      	push	{r7, lr}
 81006fa:	b084      	sub	sp, #16
 81006fc:	af00      	add	r7, sp, #0
 81006fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8100700:	f7ff ffee 	bl	81006e0 <HAL_GetTick>
 8100704:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8100706:	687b      	ldr	r3, [r7, #4]
 8100708:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 810070a:	68fb      	ldr	r3, [r7, #12]
 810070c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8100710:	d005      	beq.n	810071e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8100712:	4b0a      	ldr	r3, [pc, #40]	; (810073c <HAL_Delay+0x44>)
 8100714:	781b      	ldrb	r3, [r3, #0]
 8100716:	461a      	mov	r2, r3
 8100718:	68fb      	ldr	r3, [r7, #12]
 810071a:	4413      	add	r3, r2
 810071c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 810071e:	bf00      	nop
 8100720:	f7ff ffde 	bl	81006e0 <HAL_GetTick>
 8100724:	4602      	mov	r2, r0
 8100726:	68bb      	ldr	r3, [r7, #8]
 8100728:	1ad3      	subs	r3, r2, r3
 810072a:	68fa      	ldr	r2, [r7, #12]
 810072c:	429a      	cmp	r2, r3
 810072e:	d8f7      	bhi.n	8100720 <HAL_Delay+0x28>
  {
  }
}
 8100730:	bf00      	nop
 8100732:	bf00      	nop
 8100734:	3710      	adds	r7, #16
 8100736:	46bd      	mov	sp, r7
 8100738:	bd80      	pop	{r7, pc}
 810073a:	bf00      	nop
 810073c:	1000000c 	.word	0x1000000c

08100740 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100740:	b480      	push	{r7}
 8100742:	b085      	sub	sp, #20
 8100744:	af00      	add	r7, sp, #0
 8100746:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8100748:	687b      	ldr	r3, [r7, #4]
 810074a:	f003 0307 	and.w	r3, r3, #7
 810074e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8100750:	4b0c      	ldr	r3, [pc, #48]	; (8100784 <__NVIC_SetPriorityGrouping+0x44>)
 8100752:	68db      	ldr	r3, [r3, #12]
 8100754:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8100756:	68ba      	ldr	r2, [r7, #8]
 8100758:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 810075c:	4013      	ands	r3, r2
 810075e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8100760:	68fb      	ldr	r3, [r7, #12]
 8100762:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8100764:	68bb      	ldr	r3, [r7, #8]
 8100766:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8100768:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 810076c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8100770:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8100772:	4a04      	ldr	r2, [pc, #16]	; (8100784 <__NVIC_SetPriorityGrouping+0x44>)
 8100774:	68bb      	ldr	r3, [r7, #8]
 8100776:	60d3      	str	r3, [r2, #12]
}
 8100778:	bf00      	nop
 810077a:	3714      	adds	r7, #20
 810077c:	46bd      	mov	sp, r7
 810077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100782:	4770      	bx	lr
 8100784:	e000ed00 	.word	0xe000ed00

08100788 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8100788:	b480      	push	{r7}
 810078a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 810078c:	4b04      	ldr	r3, [pc, #16]	; (81007a0 <__NVIC_GetPriorityGrouping+0x18>)
 810078e:	68db      	ldr	r3, [r3, #12]
 8100790:	0a1b      	lsrs	r3, r3, #8
 8100792:	f003 0307 	and.w	r3, r3, #7
}
 8100796:	4618      	mov	r0, r3
 8100798:	46bd      	mov	sp, r7
 810079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810079e:	4770      	bx	lr
 81007a0:	e000ed00 	.word	0xe000ed00

081007a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81007a4:	b480      	push	{r7}
 81007a6:	b083      	sub	sp, #12
 81007a8:	af00      	add	r7, sp, #0
 81007aa:	4603      	mov	r3, r0
 81007ac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81007ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81007b2:	2b00      	cmp	r3, #0
 81007b4:	db0b      	blt.n	81007ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81007b6:	88fb      	ldrh	r3, [r7, #6]
 81007b8:	f003 021f 	and.w	r2, r3, #31
 81007bc:	4907      	ldr	r1, [pc, #28]	; (81007dc <__NVIC_EnableIRQ+0x38>)
 81007be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81007c2:	095b      	lsrs	r3, r3, #5
 81007c4:	2001      	movs	r0, #1
 81007c6:	fa00 f202 	lsl.w	r2, r0, r2
 81007ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 81007ce:	bf00      	nop
 81007d0:	370c      	adds	r7, #12
 81007d2:	46bd      	mov	sp, r7
 81007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007d8:	4770      	bx	lr
 81007da:	bf00      	nop
 81007dc:	e000e100 	.word	0xe000e100

081007e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81007e0:	b480      	push	{r7}
 81007e2:	b083      	sub	sp, #12
 81007e4:	af00      	add	r7, sp, #0
 81007e6:	4603      	mov	r3, r0
 81007e8:	6039      	str	r1, [r7, #0]
 81007ea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81007ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81007f0:	2b00      	cmp	r3, #0
 81007f2:	db0a      	blt.n	810080a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81007f4:	683b      	ldr	r3, [r7, #0]
 81007f6:	b2da      	uxtb	r2, r3
 81007f8:	490c      	ldr	r1, [pc, #48]	; (810082c <__NVIC_SetPriority+0x4c>)
 81007fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81007fe:	0112      	lsls	r2, r2, #4
 8100800:	b2d2      	uxtb	r2, r2
 8100802:	440b      	add	r3, r1
 8100804:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8100808:	e00a      	b.n	8100820 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810080a:	683b      	ldr	r3, [r7, #0]
 810080c:	b2da      	uxtb	r2, r3
 810080e:	4908      	ldr	r1, [pc, #32]	; (8100830 <__NVIC_SetPriority+0x50>)
 8100810:	88fb      	ldrh	r3, [r7, #6]
 8100812:	f003 030f 	and.w	r3, r3, #15
 8100816:	3b04      	subs	r3, #4
 8100818:	0112      	lsls	r2, r2, #4
 810081a:	b2d2      	uxtb	r2, r2
 810081c:	440b      	add	r3, r1
 810081e:	761a      	strb	r2, [r3, #24]
}
 8100820:	bf00      	nop
 8100822:	370c      	adds	r7, #12
 8100824:	46bd      	mov	sp, r7
 8100826:	f85d 7b04 	ldr.w	r7, [sp], #4
 810082a:	4770      	bx	lr
 810082c:	e000e100 	.word	0xe000e100
 8100830:	e000ed00 	.word	0xe000ed00

08100834 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100834:	b480      	push	{r7}
 8100836:	b089      	sub	sp, #36	; 0x24
 8100838:	af00      	add	r7, sp, #0
 810083a:	60f8      	str	r0, [r7, #12]
 810083c:	60b9      	str	r1, [r7, #8]
 810083e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8100840:	68fb      	ldr	r3, [r7, #12]
 8100842:	f003 0307 	and.w	r3, r3, #7
 8100846:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8100848:	69fb      	ldr	r3, [r7, #28]
 810084a:	f1c3 0307 	rsb	r3, r3, #7
 810084e:	2b04      	cmp	r3, #4
 8100850:	bf28      	it	cs
 8100852:	2304      	movcs	r3, #4
 8100854:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8100856:	69fb      	ldr	r3, [r7, #28]
 8100858:	3304      	adds	r3, #4
 810085a:	2b06      	cmp	r3, #6
 810085c:	d902      	bls.n	8100864 <NVIC_EncodePriority+0x30>
 810085e:	69fb      	ldr	r3, [r7, #28]
 8100860:	3b03      	subs	r3, #3
 8100862:	e000      	b.n	8100866 <NVIC_EncodePriority+0x32>
 8100864:	2300      	movs	r3, #0
 8100866:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100868:	f04f 32ff 	mov.w	r2, #4294967295
 810086c:	69bb      	ldr	r3, [r7, #24]
 810086e:	fa02 f303 	lsl.w	r3, r2, r3
 8100872:	43da      	mvns	r2, r3
 8100874:	68bb      	ldr	r3, [r7, #8]
 8100876:	401a      	ands	r2, r3
 8100878:	697b      	ldr	r3, [r7, #20]
 810087a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 810087c:	f04f 31ff 	mov.w	r1, #4294967295
 8100880:	697b      	ldr	r3, [r7, #20]
 8100882:	fa01 f303 	lsl.w	r3, r1, r3
 8100886:	43d9      	mvns	r1, r3
 8100888:	687b      	ldr	r3, [r7, #4]
 810088a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 810088c:	4313      	orrs	r3, r2
         );
}
 810088e:	4618      	mov	r0, r3
 8100890:	3724      	adds	r7, #36	; 0x24
 8100892:	46bd      	mov	sp, r7
 8100894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100898:	4770      	bx	lr

0810089a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810089a:	b580      	push	{r7, lr}
 810089c:	b082      	sub	sp, #8
 810089e:	af00      	add	r7, sp, #0
 81008a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 81008a2:	6878      	ldr	r0, [r7, #4]
 81008a4:	f7ff ff4c 	bl	8100740 <__NVIC_SetPriorityGrouping>
}
 81008a8:	bf00      	nop
 81008aa:	3708      	adds	r7, #8
 81008ac:	46bd      	mov	sp, r7
 81008ae:	bd80      	pop	{r7, pc}

081008b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81008b0:	b580      	push	{r7, lr}
 81008b2:	b086      	sub	sp, #24
 81008b4:	af00      	add	r7, sp, #0
 81008b6:	4603      	mov	r3, r0
 81008b8:	60b9      	str	r1, [r7, #8]
 81008ba:	607a      	str	r2, [r7, #4]
 81008bc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81008be:	f7ff ff63 	bl	8100788 <__NVIC_GetPriorityGrouping>
 81008c2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81008c4:	687a      	ldr	r2, [r7, #4]
 81008c6:	68b9      	ldr	r1, [r7, #8]
 81008c8:	6978      	ldr	r0, [r7, #20]
 81008ca:	f7ff ffb3 	bl	8100834 <NVIC_EncodePriority>
 81008ce:	4602      	mov	r2, r0
 81008d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81008d4:	4611      	mov	r1, r2
 81008d6:	4618      	mov	r0, r3
 81008d8:	f7ff ff82 	bl	81007e0 <__NVIC_SetPriority>
}
 81008dc:	bf00      	nop
 81008de:	3718      	adds	r7, #24
 81008e0:	46bd      	mov	sp, r7
 81008e2:	bd80      	pop	{r7, pc}

081008e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81008e4:	b580      	push	{r7, lr}
 81008e6:	b082      	sub	sp, #8
 81008e8:	af00      	add	r7, sp, #0
 81008ea:	4603      	mov	r3, r0
 81008ec:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 81008ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81008f2:	4618      	mov	r0, r3
 81008f4:	f7ff ff56 	bl	81007a4 <__NVIC_EnableIRQ>
}
 81008f8:	bf00      	nop
 81008fa:	3708      	adds	r7, #8
 81008fc:	46bd      	mov	sp, r7
 81008fe:	bd80      	pop	{r7, pc}

08100900 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8100900:	b480      	push	{r7}
 8100902:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8100904:	4b07      	ldr	r3, [pc, #28]	; (8100924 <HAL_GetCurrentCPUID+0x24>)
 8100906:	681b      	ldr	r3, [r3, #0]
 8100908:	091b      	lsrs	r3, r3, #4
 810090a:	f003 030f 	and.w	r3, r3, #15
 810090e:	2b07      	cmp	r3, #7
 8100910:	d101      	bne.n	8100916 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8100912:	2303      	movs	r3, #3
 8100914:	e000      	b.n	8100918 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8100916:	2301      	movs	r3, #1
  }
}
 8100918:	4618      	mov	r0, r3
 810091a:	46bd      	mov	sp, r7
 810091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100920:	4770      	bx	lr
 8100922:	bf00      	nop
 8100924:	e000ed00 	.word	0xe000ed00

08100928 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8100928:	b480      	push	{r7}
 810092a:	b089      	sub	sp, #36	; 0x24
 810092c:	af00      	add	r7, sp, #0
 810092e:	6078      	str	r0, [r7, #4]
 8100930:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8100932:	2300      	movs	r3, #0
 8100934:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8100936:	4b89      	ldr	r3, [pc, #548]	; (8100b5c <HAL_GPIO_Init+0x234>)
 8100938:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810093a:	e194      	b.n	8100c66 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 810093c:	683b      	ldr	r3, [r7, #0]
 810093e:	681a      	ldr	r2, [r3, #0]
 8100940:	2101      	movs	r1, #1
 8100942:	69fb      	ldr	r3, [r7, #28]
 8100944:	fa01 f303 	lsl.w	r3, r1, r3
 8100948:	4013      	ands	r3, r2
 810094a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 810094c:	693b      	ldr	r3, [r7, #16]
 810094e:	2b00      	cmp	r3, #0
 8100950:	f000 8186 	beq.w	8100c60 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8100954:	683b      	ldr	r3, [r7, #0]
 8100956:	685b      	ldr	r3, [r3, #4]
 8100958:	f003 0303 	and.w	r3, r3, #3
 810095c:	2b01      	cmp	r3, #1
 810095e:	d005      	beq.n	810096c <HAL_GPIO_Init+0x44>
 8100960:	683b      	ldr	r3, [r7, #0]
 8100962:	685b      	ldr	r3, [r3, #4]
 8100964:	f003 0303 	and.w	r3, r3, #3
 8100968:	2b02      	cmp	r3, #2
 810096a:	d130      	bne.n	81009ce <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 810096c:	687b      	ldr	r3, [r7, #4]
 810096e:	689b      	ldr	r3, [r3, #8]
 8100970:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8100972:	69fb      	ldr	r3, [r7, #28]
 8100974:	005b      	lsls	r3, r3, #1
 8100976:	2203      	movs	r2, #3
 8100978:	fa02 f303 	lsl.w	r3, r2, r3
 810097c:	43db      	mvns	r3, r3
 810097e:	69ba      	ldr	r2, [r7, #24]
 8100980:	4013      	ands	r3, r2
 8100982:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8100984:	683b      	ldr	r3, [r7, #0]
 8100986:	68da      	ldr	r2, [r3, #12]
 8100988:	69fb      	ldr	r3, [r7, #28]
 810098a:	005b      	lsls	r3, r3, #1
 810098c:	fa02 f303 	lsl.w	r3, r2, r3
 8100990:	69ba      	ldr	r2, [r7, #24]
 8100992:	4313      	orrs	r3, r2
 8100994:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8100996:	687b      	ldr	r3, [r7, #4]
 8100998:	69ba      	ldr	r2, [r7, #24]
 810099a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 810099c:	687b      	ldr	r3, [r7, #4]
 810099e:	685b      	ldr	r3, [r3, #4]
 81009a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 81009a2:	2201      	movs	r2, #1
 81009a4:	69fb      	ldr	r3, [r7, #28]
 81009a6:	fa02 f303 	lsl.w	r3, r2, r3
 81009aa:	43db      	mvns	r3, r3
 81009ac:	69ba      	ldr	r2, [r7, #24]
 81009ae:	4013      	ands	r3, r2
 81009b0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 81009b2:	683b      	ldr	r3, [r7, #0]
 81009b4:	685b      	ldr	r3, [r3, #4]
 81009b6:	091b      	lsrs	r3, r3, #4
 81009b8:	f003 0201 	and.w	r2, r3, #1
 81009bc:	69fb      	ldr	r3, [r7, #28]
 81009be:	fa02 f303 	lsl.w	r3, r2, r3
 81009c2:	69ba      	ldr	r2, [r7, #24]
 81009c4:	4313      	orrs	r3, r2
 81009c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81009c8:	687b      	ldr	r3, [r7, #4]
 81009ca:	69ba      	ldr	r2, [r7, #24]
 81009cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 81009ce:	683b      	ldr	r3, [r7, #0]
 81009d0:	685b      	ldr	r3, [r3, #4]
 81009d2:	f003 0303 	and.w	r3, r3, #3
 81009d6:	2b03      	cmp	r3, #3
 81009d8:	d017      	beq.n	8100a0a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81009da:	687b      	ldr	r3, [r7, #4]
 81009dc:	68db      	ldr	r3, [r3, #12]
 81009de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81009e0:	69fb      	ldr	r3, [r7, #28]
 81009e2:	005b      	lsls	r3, r3, #1
 81009e4:	2203      	movs	r2, #3
 81009e6:	fa02 f303 	lsl.w	r3, r2, r3
 81009ea:	43db      	mvns	r3, r3
 81009ec:	69ba      	ldr	r2, [r7, #24]
 81009ee:	4013      	ands	r3, r2
 81009f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81009f2:	683b      	ldr	r3, [r7, #0]
 81009f4:	689a      	ldr	r2, [r3, #8]
 81009f6:	69fb      	ldr	r3, [r7, #28]
 81009f8:	005b      	lsls	r3, r3, #1
 81009fa:	fa02 f303 	lsl.w	r3, r2, r3
 81009fe:	69ba      	ldr	r2, [r7, #24]
 8100a00:	4313      	orrs	r3, r2
 8100a02:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8100a04:	687b      	ldr	r3, [r7, #4]
 8100a06:	69ba      	ldr	r2, [r7, #24]
 8100a08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8100a0a:	683b      	ldr	r3, [r7, #0]
 8100a0c:	685b      	ldr	r3, [r3, #4]
 8100a0e:	f003 0303 	and.w	r3, r3, #3
 8100a12:	2b02      	cmp	r3, #2
 8100a14:	d123      	bne.n	8100a5e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8100a16:	69fb      	ldr	r3, [r7, #28]
 8100a18:	08da      	lsrs	r2, r3, #3
 8100a1a:	687b      	ldr	r3, [r7, #4]
 8100a1c:	3208      	adds	r2, #8
 8100a1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8100a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8100a24:	69fb      	ldr	r3, [r7, #28]
 8100a26:	f003 0307 	and.w	r3, r3, #7
 8100a2a:	009b      	lsls	r3, r3, #2
 8100a2c:	220f      	movs	r2, #15
 8100a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8100a32:	43db      	mvns	r3, r3
 8100a34:	69ba      	ldr	r2, [r7, #24]
 8100a36:	4013      	ands	r3, r2
 8100a38:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8100a3a:	683b      	ldr	r3, [r7, #0]
 8100a3c:	691a      	ldr	r2, [r3, #16]
 8100a3e:	69fb      	ldr	r3, [r7, #28]
 8100a40:	f003 0307 	and.w	r3, r3, #7
 8100a44:	009b      	lsls	r3, r3, #2
 8100a46:	fa02 f303 	lsl.w	r3, r2, r3
 8100a4a:	69ba      	ldr	r2, [r7, #24]
 8100a4c:	4313      	orrs	r3, r2
 8100a4e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8100a50:	69fb      	ldr	r3, [r7, #28]
 8100a52:	08da      	lsrs	r2, r3, #3
 8100a54:	687b      	ldr	r3, [r7, #4]
 8100a56:	3208      	adds	r2, #8
 8100a58:	69b9      	ldr	r1, [r7, #24]
 8100a5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8100a5e:	687b      	ldr	r3, [r7, #4]
 8100a60:	681b      	ldr	r3, [r3, #0]
 8100a62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8100a64:	69fb      	ldr	r3, [r7, #28]
 8100a66:	005b      	lsls	r3, r3, #1
 8100a68:	2203      	movs	r2, #3
 8100a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8100a6e:	43db      	mvns	r3, r3
 8100a70:	69ba      	ldr	r2, [r7, #24]
 8100a72:	4013      	ands	r3, r2
 8100a74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8100a76:	683b      	ldr	r3, [r7, #0]
 8100a78:	685b      	ldr	r3, [r3, #4]
 8100a7a:	f003 0203 	and.w	r2, r3, #3
 8100a7e:	69fb      	ldr	r3, [r7, #28]
 8100a80:	005b      	lsls	r3, r3, #1
 8100a82:	fa02 f303 	lsl.w	r3, r2, r3
 8100a86:	69ba      	ldr	r2, [r7, #24]
 8100a88:	4313      	orrs	r3, r2
 8100a8a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8100a8c:	687b      	ldr	r3, [r7, #4]
 8100a8e:	69ba      	ldr	r2, [r7, #24]
 8100a90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8100a92:	683b      	ldr	r3, [r7, #0]
 8100a94:	685b      	ldr	r3, [r3, #4]
 8100a96:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8100a9a:	2b00      	cmp	r3, #0
 8100a9c:	f000 80e0 	beq.w	8100c60 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100aa0:	4b2f      	ldr	r3, [pc, #188]	; (8100b60 <HAL_GPIO_Init+0x238>)
 8100aa2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100aa6:	4a2e      	ldr	r2, [pc, #184]	; (8100b60 <HAL_GPIO_Init+0x238>)
 8100aa8:	f043 0302 	orr.w	r3, r3, #2
 8100aac:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100ab0:	4b2b      	ldr	r3, [pc, #172]	; (8100b60 <HAL_GPIO_Init+0x238>)
 8100ab2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100ab6:	f003 0302 	and.w	r3, r3, #2
 8100aba:	60fb      	str	r3, [r7, #12]
 8100abc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8100abe:	4a29      	ldr	r2, [pc, #164]	; (8100b64 <HAL_GPIO_Init+0x23c>)
 8100ac0:	69fb      	ldr	r3, [r7, #28]
 8100ac2:	089b      	lsrs	r3, r3, #2
 8100ac4:	3302      	adds	r3, #2
 8100ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8100aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8100acc:	69fb      	ldr	r3, [r7, #28]
 8100ace:	f003 0303 	and.w	r3, r3, #3
 8100ad2:	009b      	lsls	r3, r3, #2
 8100ad4:	220f      	movs	r2, #15
 8100ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8100ada:	43db      	mvns	r3, r3
 8100adc:	69ba      	ldr	r2, [r7, #24]
 8100ade:	4013      	ands	r3, r2
 8100ae0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8100ae2:	687b      	ldr	r3, [r7, #4]
 8100ae4:	4a20      	ldr	r2, [pc, #128]	; (8100b68 <HAL_GPIO_Init+0x240>)
 8100ae6:	4293      	cmp	r3, r2
 8100ae8:	d052      	beq.n	8100b90 <HAL_GPIO_Init+0x268>
 8100aea:	687b      	ldr	r3, [r7, #4]
 8100aec:	4a1f      	ldr	r2, [pc, #124]	; (8100b6c <HAL_GPIO_Init+0x244>)
 8100aee:	4293      	cmp	r3, r2
 8100af0:	d031      	beq.n	8100b56 <HAL_GPIO_Init+0x22e>
 8100af2:	687b      	ldr	r3, [r7, #4]
 8100af4:	4a1e      	ldr	r2, [pc, #120]	; (8100b70 <HAL_GPIO_Init+0x248>)
 8100af6:	4293      	cmp	r3, r2
 8100af8:	d02b      	beq.n	8100b52 <HAL_GPIO_Init+0x22a>
 8100afa:	687b      	ldr	r3, [r7, #4]
 8100afc:	4a1d      	ldr	r2, [pc, #116]	; (8100b74 <HAL_GPIO_Init+0x24c>)
 8100afe:	4293      	cmp	r3, r2
 8100b00:	d025      	beq.n	8100b4e <HAL_GPIO_Init+0x226>
 8100b02:	687b      	ldr	r3, [r7, #4]
 8100b04:	4a1c      	ldr	r2, [pc, #112]	; (8100b78 <HAL_GPIO_Init+0x250>)
 8100b06:	4293      	cmp	r3, r2
 8100b08:	d01f      	beq.n	8100b4a <HAL_GPIO_Init+0x222>
 8100b0a:	687b      	ldr	r3, [r7, #4]
 8100b0c:	4a1b      	ldr	r2, [pc, #108]	; (8100b7c <HAL_GPIO_Init+0x254>)
 8100b0e:	4293      	cmp	r3, r2
 8100b10:	d019      	beq.n	8100b46 <HAL_GPIO_Init+0x21e>
 8100b12:	687b      	ldr	r3, [r7, #4]
 8100b14:	4a1a      	ldr	r2, [pc, #104]	; (8100b80 <HAL_GPIO_Init+0x258>)
 8100b16:	4293      	cmp	r3, r2
 8100b18:	d013      	beq.n	8100b42 <HAL_GPIO_Init+0x21a>
 8100b1a:	687b      	ldr	r3, [r7, #4]
 8100b1c:	4a19      	ldr	r2, [pc, #100]	; (8100b84 <HAL_GPIO_Init+0x25c>)
 8100b1e:	4293      	cmp	r3, r2
 8100b20:	d00d      	beq.n	8100b3e <HAL_GPIO_Init+0x216>
 8100b22:	687b      	ldr	r3, [r7, #4]
 8100b24:	4a18      	ldr	r2, [pc, #96]	; (8100b88 <HAL_GPIO_Init+0x260>)
 8100b26:	4293      	cmp	r3, r2
 8100b28:	d007      	beq.n	8100b3a <HAL_GPIO_Init+0x212>
 8100b2a:	687b      	ldr	r3, [r7, #4]
 8100b2c:	4a17      	ldr	r2, [pc, #92]	; (8100b8c <HAL_GPIO_Init+0x264>)
 8100b2e:	4293      	cmp	r3, r2
 8100b30:	d101      	bne.n	8100b36 <HAL_GPIO_Init+0x20e>
 8100b32:	2309      	movs	r3, #9
 8100b34:	e02d      	b.n	8100b92 <HAL_GPIO_Init+0x26a>
 8100b36:	230a      	movs	r3, #10
 8100b38:	e02b      	b.n	8100b92 <HAL_GPIO_Init+0x26a>
 8100b3a:	2308      	movs	r3, #8
 8100b3c:	e029      	b.n	8100b92 <HAL_GPIO_Init+0x26a>
 8100b3e:	2307      	movs	r3, #7
 8100b40:	e027      	b.n	8100b92 <HAL_GPIO_Init+0x26a>
 8100b42:	2306      	movs	r3, #6
 8100b44:	e025      	b.n	8100b92 <HAL_GPIO_Init+0x26a>
 8100b46:	2305      	movs	r3, #5
 8100b48:	e023      	b.n	8100b92 <HAL_GPIO_Init+0x26a>
 8100b4a:	2304      	movs	r3, #4
 8100b4c:	e021      	b.n	8100b92 <HAL_GPIO_Init+0x26a>
 8100b4e:	2303      	movs	r3, #3
 8100b50:	e01f      	b.n	8100b92 <HAL_GPIO_Init+0x26a>
 8100b52:	2302      	movs	r3, #2
 8100b54:	e01d      	b.n	8100b92 <HAL_GPIO_Init+0x26a>
 8100b56:	2301      	movs	r3, #1
 8100b58:	e01b      	b.n	8100b92 <HAL_GPIO_Init+0x26a>
 8100b5a:	bf00      	nop
 8100b5c:	580000c0 	.word	0x580000c0
 8100b60:	58024400 	.word	0x58024400
 8100b64:	58000400 	.word	0x58000400
 8100b68:	58020000 	.word	0x58020000
 8100b6c:	58020400 	.word	0x58020400
 8100b70:	58020800 	.word	0x58020800
 8100b74:	58020c00 	.word	0x58020c00
 8100b78:	58021000 	.word	0x58021000
 8100b7c:	58021400 	.word	0x58021400
 8100b80:	58021800 	.word	0x58021800
 8100b84:	58021c00 	.word	0x58021c00
 8100b88:	58022000 	.word	0x58022000
 8100b8c:	58022400 	.word	0x58022400
 8100b90:	2300      	movs	r3, #0
 8100b92:	69fa      	ldr	r2, [r7, #28]
 8100b94:	f002 0203 	and.w	r2, r2, #3
 8100b98:	0092      	lsls	r2, r2, #2
 8100b9a:	4093      	lsls	r3, r2
 8100b9c:	69ba      	ldr	r2, [r7, #24]
 8100b9e:	4313      	orrs	r3, r2
 8100ba0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8100ba2:	4938      	ldr	r1, [pc, #224]	; (8100c84 <HAL_GPIO_Init+0x35c>)
 8100ba4:	69fb      	ldr	r3, [r7, #28]
 8100ba6:	089b      	lsrs	r3, r3, #2
 8100ba8:	3302      	adds	r3, #2
 8100baa:	69ba      	ldr	r2, [r7, #24]
 8100bac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8100bb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8100bb4:	681b      	ldr	r3, [r3, #0]
 8100bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100bb8:	693b      	ldr	r3, [r7, #16]
 8100bba:	43db      	mvns	r3, r3
 8100bbc:	69ba      	ldr	r2, [r7, #24]
 8100bbe:	4013      	ands	r3, r2
 8100bc0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8100bc2:	683b      	ldr	r3, [r7, #0]
 8100bc4:	685b      	ldr	r3, [r3, #4]
 8100bc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8100bca:	2b00      	cmp	r3, #0
 8100bcc:	d003      	beq.n	8100bd6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8100bce:	69ba      	ldr	r2, [r7, #24]
 8100bd0:	693b      	ldr	r3, [r7, #16]
 8100bd2:	4313      	orrs	r3, r2
 8100bd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8100bd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8100bda:	69bb      	ldr	r3, [r7, #24]
 8100bdc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8100bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8100be2:	685b      	ldr	r3, [r3, #4]
 8100be4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100be6:	693b      	ldr	r3, [r7, #16]
 8100be8:	43db      	mvns	r3, r3
 8100bea:	69ba      	ldr	r2, [r7, #24]
 8100bec:	4013      	ands	r3, r2
 8100bee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8100bf0:	683b      	ldr	r3, [r7, #0]
 8100bf2:	685b      	ldr	r3, [r3, #4]
 8100bf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8100bf8:	2b00      	cmp	r3, #0
 8100bfa:	d003      	beq.n	8100c04 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8100bfc:	69ba      	ldr	r2, [r7, #24]
 8100bfe:	693b      	ldr	r3, [r7, #16]
 8100c00:	4313      	orrs	r3, r2
 8100c02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8100c04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8100c08:	69bb      	ldr	r3, [r7, #24]
 8100c0a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8100c0c:	697b      	ldr	r3, [r7, #20]
 8100c0e:	685b      	ldr	r3, [r3, #4]
 8100c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100c12:	693b      	ldr	r3, [r7, #16]
 8100c14:	43db      	mvns	r3, r3
 8100c16:	69ba      	ldr	r2, [r7, #24]
 8100c18:	4013      	ands	r3, r2
 8100c1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8100c1c:	683b      	ldr	r3, [r7, #0]
 8100c1e:	685b      	ldr	r3, [r3, #4]
 8100c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8100c24:	2b00      	cmp	r3, #0
 8100c26:	d003      	beq.n	8100c30 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8100c28:	69ba      	ldr	r2, [r7, #24]
 8100c2a:	693b      	ldr	r3, [r7, #16]
 8100c2c:	4313      	orrs	r3, r2
 8100c2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8100c30:	697b      	ldr	r3, [r7, #20]
 8100c32:	69ba      	ldr	r2, [r7, #24]
 8100c34:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8100c36:	697b      	ldr	r3, [r7, #20]
 8100c38:	681b      	ldr	r3, [r3, #0]
 8100c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100c3c:	693b      	ldr	r3, [r7, #16]
 8100c3e:	43db      	mvns	r3, r3
 8100c40:	69ba      	ldr	r2, [r7, #24]
 8100c42:	4013      	ands	r3, r2
 8100c44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8100c46:	683b      	ldr	r3, [r7, #0]
 8100c48:	685b      	ldr	r3, [r3, #4]
 8100c4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8100c4e:	2b00      	cmp	r3, #0
 8100c50:	d003      	beq.n	8100c5a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8100c52:	69ba      	ldr	r2, [r7, #24]
 8100c54:	693b      	ldr	r3, [r7, #16]
 8100c56:	4313      	orrs	r3, r2
 8100c58:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8100c5a:	697b      	ldr	r3, [r7, #20]
 8100c5c:	69ba      	ldr	r2, [r7, #24]
 8100c5e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8100c60:	69fb      	ldr	r3, [r7, #28]
 8100c62:	3301      	adds	r3, #1
 8100c64:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8100c66:	683b      	ldr	r3, [r7, #0]
 8100c68:	681a      	ldr	r2, [r3, #0]
 8100c6a:	69fb      	ldr	r3, [r7, #28]
 8100c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8100c70:	2b00      	cmp	r3, #0
 8100c72:	f47f ae63 	bne.w	810093c <HAL_GPIO_Init+0x14>
  }
}
 8100c76:	bf00      	nop
 8100c78:	bf00      	nop
 8100c7a:	3724      	adds	r7, #36	; 0x24
 8100c7c:	46bd      	mov	sp, r7
 8100c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c82:	4770      	bx	lr
 8100c84:	58000400 	.word	0x58000400

08100c88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8100c88:	b480      	push	{r7}
 8100c8a:	b083      	sub	sp, #12
 8100c8c:	af00      	add	r7, sp, #0
 8100c8e:	6078      	str	r0, [r7, #4]
 8100c90:	460b      	mov	r3, r1
 8100c92:	807b      	strh	r3, [r7, #2]
 8100c94:	4613      	mov	r3, r2
 8100c96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8100c98:	787b      	ldrb	r3, [r7, #1]
 8100c9a:	2b00      	cmp	r3, #0
 8100c9c:	d003      	beq.n	8100ca6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8100c9e:	887a      	ldrh	r2, [r7, #2]
 8100ca0:	687b      	ldr	r3, [r7, #4]
 8100ca2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8100ca4:	e003      	b.n	8100cae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8100ca6:	887b      	ldrh	r3, [r7, #2]
 8100ca8:	041a      	lsls	r2, r3, #16
 8100caa:	687b      	ldr	r3, [r7, #4]
 8100cac:	619a      	str	r2, [r3, #24]
}
 8100cae:	bf00      	nop
 8100cb0:	370c      	adds	r7, #12
 8100cb2:	46bd      	mov	sp, r7
 8100cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100cb8:	4770      	bx	lr

08100cba <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8100cba:	b480      	push	{r7}
 8100cbc:	b085      	sub	sp, #20
 8100cbe:	af00      	add	r7, sp, #0
 8100cc0:	6078      	str	r0, [r7, #4]
 8100cc2:	460b      	mov	r3, r1
 8100cc4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8100cc6:	687b      	ldr	r3, [r7, #4]
 8100cc8:	695b      	ldr	r3, [r3, #20]
 8100cca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8100ccc:	887a      	ldrh	r2, [r7, #2]
 8100cce:	68fb      	ldr	r3, [r7, #12]
 8100cd0:	4013      	ands	r3, r2
 8100cd2:	041a      	lsls	r2, r3, #16
 8100cd4:	68fb      	ldr	r3, [r7, #12]
 8100cd6:	43d9      	mvns	r1, r3
 8100cd8:	887b      	ldrh	r3, [r7, #2]
 8100cda:	400b      	ands	r3, r1
 8100cdc:	431a      	orrs	r2, r3
 8100cde:	687b      	ldr	r3, [r7, #4]
 8100ce0:	619a      	str	r2, [r3, #24]
}
 8100ce2:	bf00      	nop
 8100ce4:	3714      	adds	r7, #20
 8100ce6:	46bd      	mov	sp, r7
 8100ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100cec:	4770      	bx	lr
	...

08100cf0 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8100cf0:	b480      	push	{r7}
 8100cf2:	b083      	sub	sp, #12
 8100cf4:	af00      	add	r7, sp, #0
 8100cf6:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8100cf8:	4b05      	ldr	r3, [pc, #20]	; (8100d10 <HAL_HSEM_ActivateNotification+0x20>)
 8100cfa:	681a      	ldr	r2, [r3, #0]
 8100cfc:	4904      	ldr	r1, [pc, #16]	; (8100d10 <HAL_HSEM_ActivateNotification+0x20>)
 8100cfe:	687b      	ldr	r3, [r7, #4]
 8100d00:	4313      	orrs	r3, r2
 8100d02:	600b      	str	r3, [r1, #0]
#endif
}
 8100d04:	bf00      	nop
 8100d06:	370c      	adds	r7, #12
 8100d08:	46bd      	mov	sp, r7
 8100d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d0e:	4770      	bx	lr
 8100d10:	58026510 	.word	0x58026510

08100d14 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8100d14:	b580      	push	{r7, lr}
 8100d16:	b084      	sub	sp, #16
 8100d18:	af00      	add	r7, sp, #0
 8100d1a:	60f8      	str	r0, [r7, #12]
 8100d1c:	460b      	mov	r3, r1
 8100d1e:	607a      	str	r2, [r7, #4]
 8100d20:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8100d22:	4b37      	ldr	r3, [pc, #220]	; (8100e00 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100d24:	681b      	ldr	r3, [r3, #0]
 8100d26:	f023 0201 	bic.w	r2, r3, #1
 8100d2a:	4935      	ldr	r1, [pc, #212]	; (8100e00 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100d2c:	68fb      	ldr	r3, [r7, #12]
 8100d2e:	4313      	orrs	r3, r2
 8100d30:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8100d32:	687b      	ldr	r3, [r7, #4]
 8100d34:	2b00      	cmp	r3, #0
 8100d36:	d123      	bne.n	8100d80 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8100d38:	f7ff fde2 	bl	8100900 <HAL_GetCurrentCPUID>
 8100d3c:	4603      	mov	r3, r0
 8100d3e:	2b03      	cmp	r3, #3
 8100d40:	d158      	bne.n	8100df4 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8100d42:	4b2f      	ldr	r3, [pc, #188]	; (8100e00 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100d44:	691b      	ldr	r3, [r3, #16]
 8100d46:	4a2e      	ldr	r2, [pc, #184]	; (8100e00 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100d48:	f023 0301 	bic.w	r3, r3, #1
 8100d4c:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100d4e:	4b2d      	ldr	r3, [pc, #180]	; (8100e04 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100d50:	691b      	ldr	r3, [r3, #16]
 8100d52:	4a2c      	ldr	r2, [pc, #176]	; (8100e04 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100d54:	f043 0304 	orr.w	r3, r3, #4
 8100d58:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8100d5a:	f3bf 8f4f 	dsb	sy
}
 8100d5e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8100d60:	f3bf 8f6f 	isb	sy
}
 8100d64:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8100d66:	7afb      	ldrb	r3, [r7, #11]
 8100d68:	2b01      	cmp	r3, #1
 8100d6a:	d101      	bne.n	8100d70 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8100d6c:	bf30      	wfi
 8100d6e:	e000      	b.n	8100d72 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8100d70:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100d72:	4b24      	ldr	r3, [pc, #144]	; (8100e04 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100d74:	691b      	ldr	r3, [r3, #16]
 8100d76:	4a23      	ldr	r2, [pc, #140]	; (8100e04 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100d78:	f023 0304 	bic.w	r3, r3, #4
 8100d7c:	6113      	str	r3, [r2, #16]
 8100d7e:	e03c      	b.n	8100dfa <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8100d80:	687b      	ldr	r3, [r7, #4]
 8100d82:	2b01      	cmp	r3, #1
 8100d84:	d123      	bne.n	8100dce <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8100d86:	f7ff fdbb 	bl	8100900 <HAL_GetCurrentCPUID>
 8100d8a:	4603      	mov	r3, r0
 8100d8c:	2b01      	cmp	r3, #1
 8100d8e:	d133      	bne.n	8100df8 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8100d90:	4b1b      	ldr	r3, [pc, #108]	; (8100e00 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100d92:	695b      	ldr	r3, [r3, #20]
 8100d94:	4a1a      	ldr	r2, [pc, #104]	; (8100e00 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100d96:	f023 0302 	bic.w	r3, r3, #2
 8100d9a:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100d9c:	4b19      	ldr	r3, [pc, #100]	; (8100e04 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100d9e:	691b      	ldr	r3, [r3, #16]
 8100da0:	4a18      	ldr	r2, [pc, #96]	; (8100e04 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100da2:	f043 0304 	orr.w	r3, r3, #4
 8100da6:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8100da8:	f3bf 8f4f 	dsb	sy
}
 8100dac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8100dae:	f3bf 8f6f 	isb	sy
}
 8100db2:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8100db4:	7afb      	ldrb	r3, [r7, #11]
 8100db6:	2b01      	cmp	r3, #1
 8100db8:	d101      	bne.n	8100dbe <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8100dba:	bf30      	wfi
 8100dbc:	e000      	b.n	8100dc0 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8100dbe:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100dc0:	4b10      	ldr	r3, [pc, #64]	; (8100e04 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100dc2:	691b      	ldr	r3, [r3, #16]
 8100dc4:	4a0f      	ldr	r2, [pc, #60]	; (8100e04 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100dc6:	f023 0304 	bic.w	r3, r3, #4
 8100dca:	6113      	str	r3, [r2, #16]
 8100dcc:	e015      	b.n	8100dfa <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8100dce:	f7ff fd97 	bl	8100900 <HAL_GetCurrentCPUID>
 8100dd2:	4603      	mov	r3, r0
 8100dd4:	2b03      	cmp	r3, #3
 8100dd6:	d106      	bne.n	8100de6 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8100dd8:	4b09      	ldr	r3, [pc, #36]	; (8100e00 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100dda:	691b      	ldr	r3, [r3, #16]
 8100ddc:	4a08      	ldr	r2, [pc, #32]	; (8100e00 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100dde:	f023 0304 	bic.w	r3, r3, #4
 8100de2:	6113      	str	r3, [r2, #16]
 8100de4:	e009      	b.n	8100dfa <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8100de6:	4b06      	ldr	r3, [pc, #24]	; (8100e00 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100de8:	695b      	ldr	r3, [r3, #20]
 8100dea:	4a05      	ldr	r2, [pc, #20]	; (8100e00 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100dec:	f023 0304 	bic.w	r3, r3, #4
 8100df0:	6153      	str	r3, [r2, #20]
 8100df2:	e002      	b.n	8100dfa <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8100df4:	bf00      	nop
 8100df6:	e000      	b.n	8100dfa <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8100df8:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8100dfa:	3710      	adds	r7, #16
 8100dfc:	46bd      	mov	sp, r7
 8100dfe:	bd80      	pop	{r7, pc}
 8100e00:	58024800 	.word	0x58024800
 8100e04:	e000ed00 	.word	0xe000ed00

08100e08 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8100e08:	b580      	push	{r7, lr}
 8100e0a:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8100e0c:	f7ff fd78 	bl	8100900 <HAL_GetCurrentCPUID>
 8100e10:	4603      	mov	r3, r0
 8100e12:	2b03      	cmp	r3, #3
 8100e14:	d101      	bne.n	8100e1a <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8100e16:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8100e18:	e001      	b.n	8100e1e <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8100e1a:	bf40      	sev
    __WFE ();
 8100e1c:	bf20      	wfe
}
 8100e1e:	bf00      	nop
 8100e20:	bd80      	pop	{r7, pc}
	...

08100e24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8100e24:	b480      	push	{r7}
 8100e26:	b089      	sub	sp, #36	; 0x24
 8100e28:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8100e2a:	4bb3      	ldr	r3, [pc, #716]	; (81010f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100e2c:	691b      	ldr	r3, [r3, #16]
 8100e2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8100e32:	2b18      	cmp	r3, #24
 8100e34:	f200 8155 	bhi.w	81010e2 <HAL_RCC_GetSysClockFreq+0x2be>
 8100e38:	a201      	add	r2, pc, #4	; (adr r2, 8100e40 <HAL_RCC_GetSysClockFreq+0x1c>)
 8100e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8100e3e:	bf00      	nop
 8100e40:	08100ea5 	.word	0x08100ea5
 8100e44:	081010e3 	.word	0x081010e3
 8100e48:	081010e3 	.word	0x081010e3
 8100e4c:	081010e3 	.word	0x081010e3
 8100e50:	081010e3 	.word	0x081010e3
 8100e54:	081010e3 	.word	0x081010e3
 8100e58:	081010e3 	.word	0x081010e3
 8100e5c:	081010e3 	.word	0x081010e3
 8100e60:	08100ecb 	.word	0x08100ecb
 8100e64:	081010e3 	.word	0x081010e3
 8100e68:	081010e3 	.word	0x081010e3
 8100e6c:	081010e3 	.word	0x081010e3
 8100e70:	081010e3 	.word	0x081010e3
 8100e74:	081010e3 	.word	0x081010e3
 8100e78:	081010e3 	.word	0x081010e3
 8100e7c:	081010e3 	.word	0x081010e3
 8100e80:	08100ed1 	.word	0x08100ed1
 8100e84:	081010e3 	.word	0x081010e3
 8100e88:	081010e3 	.word	0x081010e3
 8100e8c:	081010e3 	.word	0x081010e3
 8100e90:	081010e3 	.word	0x081010e3
 8100e94:	081010e3 	.word	0x081010e3
 8100e98:	081010e3 	.word	0x081010e3
 8100e9c:	081010e3 	.word	0x081010e3
 8100ea0:	08100ed7 	.word	0x08100ed7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8100ea4:	4b94      	ldr	r3, [pc, #592]	; (81010f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100ea6:	681b      	ldr	r3, [r3, #0]
 8100ea8:	f003 0320 	and.w	r3, r3, #32
 8100eac:	2b00      	cmp	r3, #0
 8100eae:	d009      	beq.n	8100ec4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8100eb0:	4b91      	ldr	r3, [pc, #580]	; (81010f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100eb2:	681b      	ldr	r3, [r3, #0]
 8100eb4:	08db      	lsrs	r3, r3, #3
 8100eb6:	f003 0303 	and.w	r3, r3, #3
 8100eba:	4a90      	ldr	r2, [pc, #576]	; (81010fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8100ebc:	fa22 f303 	lsr.w	r3, r2, r3
 8100ec0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8100ec2:	e111      	b.n	81010e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8100ec4:	4b8d      	ldr	r3, [pc, #564]	; (81010fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8100ec6:	61bb      	str	r3, [r7, #24]
    break;
 8100ec8:	e10e      	b.n	81010e8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8100eca:	4b8d      	ldr	r3, [pc, #564]	; (8101100 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8100ecc:	61bb      	str	r3, [r7, #24]
    break;
 8100ece:	e10b      	b.n	81010e8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8100ed0:	4b8c      	ldr	r3, [pc, #560]	; (8101104 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8100ed2:	61bb      	str	r3, [r7, #24]
    break;
 8100ed4:	e108      	b.n	81010e8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8100ed6:	4b88      	ldr	r3, [pc, #544]	; (81010f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8100eda:	f003 0303 	and.w	r3, r3, #3
 8100ede:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8100ee0:	4b85      	ldr	r3, [pc, #532]	; (81010f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8100ee4:	091b      	lsrs	r3, r3, #4
 8100ee6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8100eea:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8100eec:	4b82      	ldr	r3, [pc, #520]	; (81010f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8100ef0:	f003 0301 	and.w	r3, r3, #1
 8100ef4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8100ef6:	4b80      	ldr	r3, [pc, #512]	; (81010f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8100efa:	08db      	lsrs	r3, r3, #3
 8100efc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8100f00:	68fa      	ldr	r2, [r7, #12]
 8100f02:	fb02 f303 	mul.w	r3, r2, r3
 8100f06:	ee07 3a90 	vmov	s15, r3
 8100f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100f0e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8100f12:	693b      	ldr	r3, [r7, #16]
 8100f14:	2b00      	cmp	r3, #0
 8100f16:	f000 80e1 	beq.w	81010dc <HAL_RCC_GetSysClockFreq+0x2b8>
 8100f1a:	697b      	ldr	r3, [r7, #20]
 8100f1c:	2b02      	cmp	r3, #2
 8100f1e:	f000 8083 	beq.w	8101028 <HAL_RCC_GetSysClockFreq+0x204>
 8100f22:	697b      	ldr	r3, [r7, #20]
 8100f24:	2b02      	cmp	r3, #2
 8100f26:	f200 80a1 	bhi.w	810106c <HAL_RCC_GetSysClockFreq+0x248>
 8100f2a:	697b      	ldr	r3, [r7, #20]
 8100f2c:	2b00      	cmp	r3, #0
 8100f2e:	d003      	beq.n	8100f38 <HAL_RCC_GetSysClockFreq+0x114>
 8100f30:	697b      	ldr	r3, [r7, #20]
 8100f32:	2b01      	cmp	r3, #1
 8100f34:	d056      	beq.n	8100fe4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8100f36:	e099      	b.n	810106c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8100f38:	4b6f      	ldr	r3, [pc, #444]	; (81010f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100f3a:	681b      	ldr	r3, [r3, #0]
 8100f3c:	f003 0320 	and.w	r3, r3, #32
 8100f40:	2b00      	cmp	r3, #0
 8100f42:	d02d      	beq.n	8100fa0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8100f44:	4b6c      	ldr	r3, [pc, #432]	; (81010f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100f46:	681b      	ldr	r3, [r3, #0]
 8100f48:	08db      	lsrs	r3, r3, #3
 8100f4a:	f003 0303 	and.w	r3, r3, #3
 8100f4e:	4a6b      	ldr	r2, [pc, #428]	; (81010fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8100f50:	fa22 f303 	lsr.w	r3, r2, r3
 8100f54:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8100f56:	687b      	ldr	r3, [r7, #4]
 8100f58:	ee07 3a90 	vmov	s15, r3
 8100f5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100f60:	693b      	ldr	r3, [r7, #16]
 8100f62:	ee07 3a90 	vmov	s15, r3
 8100f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100f6e:	4b62      	ldr	r3, [pc, #392]	; (81010f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100f76:	ee07 3a90 	vmov	s15, r3
 8100f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100f7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8100f82:	eddf 5a61 	vldr	s11, [pc, #388]	; 8101108 <HAL_RCC_GetSysClockFreq+0x2e4>
 8100f86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100f8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8100f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100f9a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8100f9e:	e087      	b.n	81010b0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8100fa0:	693b      	ldr	r3, [r7, #16]
 8100fa2:	ee07 3a90 	vmov	s15, r3
 8100fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100faa:	eddf 6a58 	vldr	s13, [pc, #352]	; 810110c <HAL_RCC_GetSysClockFreq+0x2e8>
 8100fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100fb2:	4b51      	ldr	r3, [pc, #324]	; (81010f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100fba:	ee07 3a90 	vmov	s15, r3
 8100fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100fc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8100fc6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8101108 <HAL_RCC_GetSysClockFreq+0x2e4>
 8100fca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100fce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100fd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8100fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100fde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8100fe2:	e065      	b.n	81010b0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8100fe4:	693b      	ldr	r3, [r7, #16]
 8100fe6:	ee07 3a90 	vmov	s15, r3
 8100fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100fee:	eddf 6a48 	vldr	s13, [pc, #288]	; 8101110 <HAL_RCC_GetSysClockFreq+0x2ec>
 8100ff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100ff6:	4b40      	ldr	r3, [pc, #256]	; (81010f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100ffe:	ee07 3a90 	vmov	s15, r3
 8101002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101006:	ed97 6a02 	vldr	s12, [r7, #8]
 810100a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8101108 <HAL_RCC_GetSysClockFreq+0x2e4>
 810100e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101016:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810101a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810101e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101022:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101026:	e043      	b.n	81010b0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101028:	693b      	ldr	r3, [r7, #16]
 810102a:	ee07 3a90 	vmov	s15, r3
 810102e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101032:	eddf 6a38 	vldr	s13, [pc, #224]	; 8101114 <HAL_RCC_GetSysClockFreq+0x2f0>
 8101036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810103a:	4b2f      	ldr	r3, [pc, #188]	; (81010f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810103e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101042:	ee07 3a90 	vmov	s15, r3
 8101046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810104a:	ed97 6a02 	vldr	s12, [r7, #8]
 810104e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8101108 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810105a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810105e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101066:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810106a:	e021      	b.n	81010b0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810106c:	693b      	ldr	r3, [r7, #16]
 810106e:	ee07 3a90 	vmov	s15, r3
 8101072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101076:	eddf 6a26 	vldr	s13, [pc, #152]	; 8101110 <HAL_RCC_GetSysClockFreq+0x2ec>
 810107a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810107e:	4b1e      	ldr	r3, [pc, #120]	; (81010f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101086:	ee07 3a90 	vmov	s15, r3
 810108a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810108e:	ed97 6a02 	vldr	s12, [r7, #8]
 8101092:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8101108 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810109a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810109e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81010a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81010a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81010aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81010ae:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 81010b0:	4b11      	ldr	r3, [pc, #68]	; (81010f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81010b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81010b4:	0a5b      	lsrs	r3, r3, #9
 81010b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81010ba:	3301      	adds	r3, #1
 81010bc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 81010be:	683b      	ldr	r3, [r7, #0]
 81010c0:	ee07 3a90 	vmov	s15, r3
 81010c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81010c8:	edd7 6a07 	vldr	s13, [r7, #28]
 81010cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81010d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81010d4:	ee17 3a90 	vmov	r3, s15
 81010d8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 81010da:	e005      	b.n	81010e8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 81010dc:	2300      	movs	r3, #0
 81010de:	61bb      	str	r3, [r7, #24]
    break;
 81010e0:	e002      	b.n	81010e8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 81010e2:	4b07      	ldr	r3, [pc, #28]	; (8101100 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81010e4:	61bb      	str	r3, [r7, #24]
    break;
 81010e6:	bf00      	nop
  }

  return sysclockfreq;
 81010e8:	69bb      	ldr	r3, [r7, #24]
}
 81010ea:	4618      	mov	r0, r3
 81010ec:	3724      	adds	r7, #36	; 0x24
 81010ee:	46bd      	mov	sp, r7
 81010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010f4:	4770      	bx	lr
 81010f6:	bf00      	nop
 81010f8:	58024400 	.word	0x58024400
 81010fc:	03d09000 	.word	0x03d09000
 8101100:	003d0900 	.word	0x003d0900
 8101104:	017d7840 	.word	0x017d7840
 8101108:	46000000 	.word	0x46000000
 810110c:	4c742400 	.word	0x4c742400
 8101110:	4a742400 	.word	0x4a742400
 8101114:	4bbebc20 	.word	0x4bbebc20

08101118 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8101118:	b580      	push	{r7, lr}
 810111a:	b082      	sub	sp, #8
 810111c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810111e:	f7ff fe81 	bl	8100e24 <HAL_RCC_GetSysClockFreq>
 8101122:	4602      	mov	r2, r0
 8101124:	4b11      	ldr	r3, [pc, #68]	; (810116c <HAL_RCC_GetHCLKFreq+0x54>)
 8101126:	699b      	ldr	r3, [r3, #24]
 8101128:	0a1b      	lsrs	r3, r3, #8
 810112a:	f003 030f 	and.w	r3, r3, #15
 810112e:	4910      	ldr	r1, [pc, #64]	; (8101170 <HAL_RCC_GetHCLKFreq+0x58>)
 8101130:	5ccb      	ldrb	r3, [r1, r3]
 8101132:	f003 031f 	and.w	r3, r3, #31
 8101136:	fa22 f303 	lsr.w	r3, r2, r3
 810113a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810113c:	4b0b      	ldr	r3, [pc, #44]	; (810116c <HAL_RCC_GetHCLKFreq+0x54>)
 810113e:	699b      	ldr	r3, [r3, #24]
 8101140:	f003 030f 	and.w	r3, r3, #15
 8101144:	4a0a      	ldr	r2, [pc, #40]	; (8101170 <HAL_RCC_GetHCLKFreq+0x58>)
 8101146:	5cd3      	ldrb	r3, [r2, r3]
 8101148:	f003 031f 	and.w	r3, r3, #31
 810114c:	687a      	ldr	r2, [r7, #4]
 810114e:	fa22 f303 	lsr.w	r3, r2, r3
 8101152:	4a08      	ldr	r2, [pc, #32]	; (8101174 <HAL_RCC_GetHCLKFreq+0x5c>)
 8101154:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101156:	4b07      	ldr	r3, [pc, #28]	; (8101174 <HAL_RCC_GetHCLKFreq+0x5c>)
 8101158:	681b      	ldr	r3, [r3, #0]
 810115a:	4a07      	ldr	r2, [pc, #28]	; (8101178 <HAL_RCC_GetHCLKFreq+0x60>)
 810115c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 810115e:	4b05      	ldr	r3, [pc, #20]	; (8101174 <HAL_RCC_GetHCLKFreq+0x5c>)
 8101160:	681b      	ldr	r3, [r3, #0]
}
 8101162:	4618      	mov	r0, r3
 8101164:	3708      	adds	r7, #8
 8101166:	46bd      	mov	sp, r7
 8101168:	bd80      	pop	{r7, pc}
 810116a:	bf00      	nop
 810116c:	58024400 	.word	0x58024400
 8101170:	08101840 	.word	0x08101840
 8101174:	10000004 	.word	0x10000004
 8101178:	10000000 	.word	0x10000000

0810117c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 810117c:	b580      	push	{r7, lr}
 810117e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8101180:	f7ff ffca 	bl	8101118 <HAL_RCC_GetHCLKFreq>
 8101184:	4602      	mov	r2, r0
 8101186:	4b06      	ldr	r3, [pc, #24]	; (81011a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8101188:	69db      	ldr	r3, [r3, #28]
 810118a:	091b      	lsrs	r3, r3, #4
 810118c:	f003 0307 	and.w	r3, r3, #7
 8101190:	4904      	ldr	r1, [pc, #16]	; (81011a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8101192:	5ccb      	ldrb	r3, [r1, r3]
 8101194:	f003 031f 	and.w	r3, r3, #31
 8101198:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 810119c:	4618      	mov	r0, r3
 810119e:	bd80      	pop	{r7, pc}
 81011a0:	58024400 	.word	0x58024400
 81011a4:	08101840 	.word	0x08101840

081011a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 81011a8:	b480      	push	{r7}
 81011aa:	b083      	sub	sp, #12
 81011ac:	af00      	add	r7, sp, #0
 81011ae:	6078      	str	r0, [r7, #4]
 81011b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 81011b2:	687b      	ldr	r3, [r7, #4]
 81011b4:	223f      	movs	r2, #63	; 0x3f
 81011b6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 81011b8:	4b1a      	ldr	r3, [pc, #104]	; (8101224 <HAL_RCC_GetClockConfig+0x7c>)
 81011ba:	691b      	ldr	r3, [r3, #16]
 81011bc:	f003 0207 	and.w	r2, r3, #7
 81011c0:	687b      	ldr	r3, [r7, #4]
 81011c2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 81011c4:	4b17      	ldr	r3, [pc, #92]	; (8101224 <HAL_RCC_GetClockConfig+0x7c>)
 81011c6:	699b      	ldr	r3, [r3, #24]
 81011c8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 81011cc:	687b      	ldr	r3, [r7, #4]
 81011ce:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 81011d0:	4b14      	ldr	r3, [pc, #80]	; (8101224 <HAL_RCC_GetClockConfig+0x7c>)
 81011d2:	699b      	ldr	r3, [r3, #24]
 81011d4:	f003 020f 	and.w	r2, r3, #15
 81011d8:	687b      	ldr	r3, [r7, #4]
 81011da:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 81011dc:	4b11      	ldr	r3, [pc, #68]	; (8101224 <HAL_RCC_GetClockConfig+0x7c>)
 81011de:	699b      	ldr	r3, [r3, #24]
 81011e0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 81011e4:	687b      	ldr	r3, [r7, #4]
 81011e6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 81011e8:	4b0e      	ldr	r3, [pc, #56]	; (8101224 <HAL_RCC_GetClockConfig+0x7c>)
 81011ea:	69db      	ldr	r3, [r3, #28]
 81011ec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 81011f0:	687b      	ldr	r3, [r7, #4]
 81011f2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 81011f4:	4b0b      	ldr	r3, [pc, #44]	; (8101224 <HAL_RCC_GetClockConfig+0x7c>)
 81011f6:	69db      	ldr	r3, [r3, #28]
 81011f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 81011fc:	687b      	ldr	r3, [r7, #4]
 81011fe:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8101200:	4b08      	ldr	r3, [pc, #32]	; (8101224 <HAL_RCC_GetClockConfig+0x7c>)
 8101202:	6a1b      	ldr	r3, [r3, #32]
 8101204:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8101208:	687b      	ldr	r3, [r7, #4]
 810120a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 810120c:	4b06      	ldr	r3, [pc, #24]	; (8101228 <HAL_RCC_GetClockConfig+0x80>)
 810120e:	681b      	ldr	r3, [r3, #0]
 8101210:	f003 020f 	and.w	r2, r3, #15
 8101214:	683b      	ldr	r3, [r7, #0]
 8101216:	601a      	str	r2, [r3, #0]
}
 8101218:	bf00      	nop
 810121a:	370c      	adds	r7, #12
 810121c:	46bd      	mov	sp, r7
 810121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101222:	4770      	bx	lr
 8101224:	58024400 	.word	0x58024400
 8101228:	52002000 	.word	0x52002000

0810122c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 810122c:	b580      	push	{r7, lr}
 810122e:	b082      	sub	sp, #8
 8101230:	af00      	add	r7, sp, #0
 8101232:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8101234:	687b      	ldr	r3, [r7, #4]
 8101236:	2b00      	cmp	r3, #0
 8101238:	d101      	bne.n	810123e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 810123a:	2301      	movs	r3, #1
 810123c:	e049      	b.n	81012d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810123e:	687b      	ldr	r3, [r7, #4]
 8101240:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8101244:	b2db      	uxtb	r3, r3
 8101246:	2b00      	cmp	r3, #0
 8101248:	d106      	bne.n	8101258 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810124a:	687b      	ldr	r3, [r7, #4]
 810124c:	2200      	movs	r2, #0
 810124e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8101252:	6878      	ldr	r0, [r7, #4]
 8101254:	f000 f841 	bl	81012da <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8101258:	687b      	ldr	r3, [r7, #4]
 810125a:	2202      	movs	r2, #2
 810125c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8101260:	687b      	ldr	r3, [r7, #4]
 8101262:	681a      	ldr	r2, [r3, #0]
 8101264:	687b      	ldr	r3, [r7, #4]
 8101266:	3304      	adds	r3, #4
 8101268:	4619      	mov	r1, r3
 810126a:	4610      	mov	r0, r2
 810126c:	f000 fa00 	bl	8101670 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8101270:	687b      	ldr	r3, [r7, #4]
 8101272:	2201      	movs	r2, #1
 8101274:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8101278:	687b      	ldr	r3, [r7, #4]
 810127a:	2201      	movs	r2, #1
 810127c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8101280:	687b      	ldr	r3, [r7, #4]
 8101282:	2201      	movs	r2, #1
 8101284:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8101288:	687b      	ldr	r3, [r7, #4]
 810128a:	2201      	movs	r2, #1
 810128c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8101290:	687b      	ldr	r3, [r7, #4]
 8101292:	2201      	movs	r2, #1
 8101294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8101298:	687b      	ldr	r3, [r7, #4]
 810129a:	2201      	movs	r2, #1
 810129c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 81012a0:	687b      	ldr	r3, [r7, #4]
 81012a2:	2201      	movs	r2, #1
 81012a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81012a8:	687b      	ldr	r3, [r7, #4]
 81012aa:	2201      	movs	r2, #1
 81012ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 81012b0:	687b      	ldr	r3, [r7, #4]
 81012b2:	2201      	movs	r2, #1
 81012b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 81012b8:	687b      	ldr	r3, [r7, #4]
 81012ba:	2201      	movs	r2, #1
 81012bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 81012c0:	687b      	ldr	r3, [r7, #4]
 81012c2:	2201      	movs	r2, #1
 81012c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81012c8:	687b      	ldr	r3, [r7, #4]
 81012ca:	2201      	movs	r2, #1
 81012cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 81012d0:	2300      	movs	r3, #0
}
 81012d2:	4618      	mov	r0, r3
 81012d4:	3708      	adds	r7, #8
 81012d6:	46bd      	mov	sp, r7
 81012d8:	bd80      	pop	{r7, pc}

081012da <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 81012da:	b480      	push	{r7}
 81012dc:	b083      	sub	sp, #12
 81012de:	af00      	add	r7, sp, #0
 81012e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 81012e2:	bf00      	nop
 81012e4:	370c      	adds	r7, #12
 81012e6:	46bd      	mov	sp, r7
 81012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012ec:	4770      	bx	lr
	...

081012f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 81012f0:	b480      	push	{r7}
 81012f2:	b085      	sub	sp, #20
 81012f4:	af00      	add	r7, sp, #0
 81012f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 81012f8:	687b      	ldr	r3, [r7, #4]
 81012fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81012fe:	b2db      	uxtb	r3, r3
 8101300:	2b01      	cmp	r3, #1
 8101302:	d001      	beq.n	8101308 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8101304:	2301      	movs	r3, #1
 8101306:	e054      	b.n	81013b2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8101308:	687b      	ldr	r3, [r7, #4]
 810130a:	2202      	movs	r2, #2
 810130c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8101310:	687b      	ldr	r3, [r7, #4]
 8101312:	681b      	ldr	r3, [r3, #0]
 8101314:	68da      	ldr	r2, [r3, #12]
 8101316:	687b      	ldr	r3, [r7, #4]
 8101318:	681b      	ldr	r3, [r3, #0]
 810131a:	f042 0201 	orr.w	r2, r2, #1
 810131e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8101320:	687b      	ldr	r3, [r7, #4]
 8101322:	681b      	ldr	r3, [r3, #0]
 8101324:	4a26      	ldr	r2, [pc, #152]	; (81013c0 <HAL_TIM_Base_Start_IT+0xd0>)
 8101326:	4293      	cmp	r3, r2
 8101328:	d022      	beq.n	8101370 <HAL_TIM_Base_Start_IT+0x80>
 810132a:	687b      	ldr	r3, [r7, #4]
 810132c:	681b      	ldr	r3, [r3, #0]
 810132e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101332:	d01d      	beq.n	8101370 <HAL_TIM_Base_Start_IT+0x80>
 8101334:	687b      	ldr	r3, [r7, #4]
 8101336:	681b      	ldr	r3, [r3, #0]
 8101338:	4a22      	ldr	r2, [pc, #136]	; (81013c4 <HAL_TIM_Base_Start_IT+0xd4>)
 810133a:	4293      	cmp	r3, r2
 810133c:	d018      	beq.n	8101370 <HAL_TIM_Base_Start_IT+0x80>
 810133e:	687b      	ldr	r3, [r7, #4]
 8101340:	681b      	ldr	r3, [r3, #0]
 8101342:	4a21      	ldr	r2, [pc, #132]	; (81013c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8101344:	4293      	cmp	r3, r2
 8101346:	d013      	beq.n	8101370 <HAL_TIM_Base_Start_IT+0x80>
 8101348:	687b      	ldr	r3, [r7, #4]
 810134a:	681b      	ldr	r3, [r3, #0]
 810134c:	4a1f      	ldr	r2, [pc, #124]	; (81013cc <HAL_TIM_Base_Start_IT+0xdc>)
 810134e:	4293      	cmp	r3, r2
 8101350:	d00e      	beq.n	8101370 <HAL_TIM_Base_Start_IT+0x80>
 8101352:	687b      	ldr	r3, [r7, #4]
 8101354:	681b      	ldr	r3, [r3, #0]
 8101356:	4a1e      	ldr	r2, [pc, #120]	; (81013d0 <HAL_TIM_Base_Start_IT+0xe0>)
 8101358:	4293      	cmp	r3, r2
 810135a:	d009      	beq.n	8101370 <HAL_TIM_Base_Start_IT+0x80>
 810135c:	687b      	ldr	r3, [r7, #4]
 810135e:	681b      	ldr	r3, [r3, #0]
 8101360:	4a1c      	ldr	r2, [pc, #112]	; (81013d4 <HAL_TIM_Base_Start_IT+0xe4>)
 8101362:	4293      	cmp	r3, r2
 8101364:	d004      	beq.n	8101370 <HAL_TIM_Base_Start_IT+0x80>
 8101366:	687b      	ldr	r3, [r7, #4]
 8101368:	681b      	ldr	r3, [r3, #0]
 810136a:	4a1b      	ldr	r2, [pc, #108]	; (81013d8 <HAL_TIM_Base_Start_IT+0xe8>)
 810136c:	4293      	cmp	r3, r2
 810136e:	d115      	bne.n	810139c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8101370:	687b      	ldr	r3, [r7, #4]
 8101372:	681b      	ldr	r3, [r3, #0]
 8101374:	689a      	ldr	r2, [r3, #8]
 8101376:	4b19      	ldr	r3, [pc, #100]	; (81013dc <HAL_TIM_Base_Start_IT+0xec>)
 8101378:	4013      	ands	r3, r2
 810137a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810137c:	68fb      	ldr	r3, [r7, #12]
 810137e:	2b06      	cmp	r3, #6
 8101380:	d015      	beq.n	81013ae <HAL_TIM_Base_Start_IT+0xbe>
 8101382:	68fb      	ldr	r3, [r7, #12]
 8101384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8101388:	d011      	beq.n	81013ae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 810138a:	687b      	ldr	r3, [r7, #4]
 810138c:	681b      	ldr	r3, [r3, #0]
 810138e:	681a      	ldr	r2, [r3, #0]
 8101390:	687b      	ldr	r3, [r7, #4]
 8101392:	681b      	ldr	r3, [r3, #0]
 8101394:	f042 0201 	orr.w	r2, r2, #1
 8101398:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810139a:	e008      	b.n	81013ae <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 810139c:	687b      	ldr	r3, [r7, #4]
 810139e:	681b      	ldr	r3, [r3, #0]
 81013a0:	681a      	ldr	r2, [r3, #0]
 81013a2:	687b      	ldr	r3, [r7, #4]
 81013a4:	681b      	ldr	r3, [r3, #0]
 81013a6:	f042 0201 	orr.w	r2, r2, #1
 81013aa:	601a      	str	r2, [r3, #0]
 81013ac:	e000      	b.n	81013b0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81013ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 81013b0:	2300      	movs	r3, #0
}
 81013b2:	4618      	mov	r0, r3
 81013b4:	3714      	adds	r7, #20
 81013b6:	46bd      	mov	sp, r7
 81013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013bc:	4770      	bx	lr
 81013be:	bf00      	nop
 81013c0:	40010000 	.word	0x40010000
 81013c4:	40000400 	.word	0x40000400
 81013c8:	40000800 	.word	0x40000800
 81013cc:	40000c00 	.word	0x40000c00
 81013d0:	40010400 	.word	0x40010400
 81013d4:	40001800 	.word	0x40001800
 81013d8:	40014000 	.word	0x40014000
 81013dc:	00010007 	.word	0x00010007

081013e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 81013e0:	b580      	push	{r7, lr}
 81013e2:	b082      	sub	sp, #8
 81013e4:	af00      	add	r7, sp, #0
 81013e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 81013e8:	687b      	ldr	r3, [r7, #4]
 81013ea:	681b      	ldr	r3, [r3, #0]
 81013ec:	691b      	ldr	r3, [r3, #16]
 81013ee:	f003 0302 	and.w	r3, r3, #2
 81013f2:	2b02      	cmp	r3, #2
 81013f4:	d122      	bne.n	810143c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 81013f6:	687b      	ldr	r3, [r7, #4]
 81013f8:	681b      	ldr	r3, [r3, #0]
 81013fa:	68db      	ldr	r3, [r3, #12]
 81013fc:	f003 0302 	and.w	r3, r3, #2
 8101400:	2b02      	cmp	r3, #2
 8101402:	d11b      	bne.n	810143c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8101404:	687b      	ldr	r3, [r7, #4]
 8101406:	681b      	ldr	r3, [r3, #0]
 8101408:	f06f 0202 	mvn.w	r2, #2
 810140c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 810140e:	687b      	ldr	r3, [r7, #4]
 8101410:	2201      	movs	r2, #1
 8101412:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8101414:	687b      	ldr	r3, [r7, #4]
 8101416:	681b      	ldr	r3, [r3, #0]
 8101418:	699b      	ldr	r3, [r3, #24]
 810141a:	f003 0303 	and.w	r3, r3, #3
 810141e:	2b00      	cmp	r3, #0
 8101420:	d003      	beq.n	810142a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8101422:	6878      	ldr	r0, [r7, #4]
 8101424:	f000 f905 	bl	8101632 <HAL_TIM_IC_CaptureCallback>
 8101428:	e005      	b.n	8101436 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 810142a:	6878      	ldr	r0, [r7, #4]
 810142c:	f000 f8f7 	bl	810161e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8101430:	6878      	ldr	r0, [r7, #4]
 8101432:	f000 f908 	bl	8101646 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8101436:	687b      	ldr	r3, [r7, #4]
 8101438:	2200      	movs	r2, #0
 810143a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 810143c:	687b      	ldr	r3, [r7, #4]
 810143e:	681b      	ldr	r3, [r3, #0]
 8101440:	691b      	ldr	r3, [r3, #16]
 8101442:	f003 0304 	and.w	r3, r3, #4
 8101446:	2b04      	cmp	r3, #4
 8101448:	d122      	bne.n	8101490 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 810144a:	687b      	ldr	r3, [r7, #4]
 810144c:	681b      	ldr	r3, [r3, #0]
 810144e:	68db      	ldr	r3, [r3, #12]
 8101450:	f003 0304 	and.w	r3, r3, #4
 8101454:	2b04      	cmp	r3, #4
 8101456:	d11b      	bne.n	8101490 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8101458:	687b      	ldr	r3, [r7, #4]
 810145a:	681b      	ldr	r3, [r3, #0]
 810145c:	f06f 0204 	mvn.w	r2, #4
 8101460:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8101462:	687b      	ldr	r3, [r7, #4]
 8101464:	2202      	movs	r2, #2
 8101466:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8101468:	687b      	ldr	r3, [r7, #4]
 810146a:	681b      	ldr	r3, [r3, #0]
 810146c:	699b      	ldr	r3, [r3, #24]
 810146e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8101472:	2b00      	cmp	r3, #0
 8101474:	d003      	beq.n	810147e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8101476:	6878      	ldr	r0, [r7, #4]
 8101478:	f000 f8db 	bl	8101632 <HAL_TIM_IC_CaptureCallback>
 810147c:	e005      	b.n	810148a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810147e:	6878      	ldr	r0, [r7, #4]
 8101480:	f000 f8cd 	bl	810161e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8101484:	6878      	ldr	r0, [r7, #4]
 8101486:	f000 f8de 	bl	8101646 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810148a:	687b      	ldr	r3, [r7, #4]
 810148c:	2200      	movs	r2, #0
 810148e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8101490:	687b      	ldr	r3, [r7, #4]
 8101492:	681b      	ldr	r3, [r3, #0]
 8101494:	691b      	ldr	r3, [r3, #16]
 8101496:	f003 0308 	and.w	r3, r3, #8
 810149a:	2b08      	cmp	r3, #8
 810149c:	d122      	bne.n	81014e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 810149e:	687b      	ldr	r3, [r7, #4]
 81014a0:	681b      	ldr	r3, [r3, #0]
 81014a2:	68db      	ldr	r3, [r3, #12]
 81014a4:	f003 0308 	and.w	r3, r3, #8
 81014a8:	2b08      	cmp	r3, #8
 81014aa:	d11b      	bne.n	81014e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 81014ac:	687b      	ldr	r3, [r7, #4]
 81014ae:	681b      	ldr	r3, [r3, #0]
 81014b0:	f06f 0208 	mvn.w	r2, #8
 81014b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 81014b6:	687b      	ldr	r3, [r7, #4]
 81014b8:	2204      	movs	r2, #4
 81014ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 81014bc:	687b      	ldr	r3, [r7, #4]
 81014be:	681b      	ldr	r3, [r3, #0]
 81014c0:	69db      	ldr	r3, [r3, #28]
 81014c2:	f003 0303 	and.w	r3, r3, #3
 81014c6:	2b00      	cmp	r3, #0
 81014c8:	d003      	beq.n	81014d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81014ca:	6878      	ldr	r0, [r7, #4]
 81014cc:	f000 f8b1 	bl	8101632 <HAL_TIM_IC_CaptureCallback>
 81014d0:	e005      	b.n	81014de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81014d2:	6878      	ldr	r0, [r7, #4]
 81014d4:	f000 f8a3 	bl	810161e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81014d8:	6878      	ldr	r0, [r7, #4]
 81014da:	f000 f8b4 	bl	8101646 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81014de:	687b      	ldr	r3, [r7, #4]
 81014e0:	2200      	movs	r2, #0
 81014e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 81014e4:	687b      	ldr	r3, [r7, #4]
 81014e6:	681b      	ldr	r3, [r3, #0]
 81014e8:	691b      	ldr	r3, [r3, #16]
 81014ea:	f003 0310 	and.w	r3, r3, #16
 81014ee:	2b10      	cmp	r3, #16
 81014f0:	d122      	bne.n	8101538 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 81014f2:	687b      	ldr	r3, [r7, #4]
 81014f4:	681b      	ldr	r3, [r3, #0]
 81014f6:	68db      	ldr	r3, [r3, #12]
 81014f8:	f003 0310 	and.w	r3, r3, #16
 81014fc:	2b10      	cmp	r3, #16
 81014fe:	d11b      	bne.n	8101538 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8101500:	687b      	ldr	r3, [r7, #4]
 8101502:	681b      	ldr	r3, [r3, #0]
 8101504:	f06f 0210 	mvn.w	r2, #16
 8101508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 810150a:	687b      	ldr	r3, [r7, #4]
 810150c:	2208      	movs	r2, #8
 810150e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8101510:	687b      	ldr	r3, [r7, #4]
 8101512:	681b      	ldr	r3, [r3, #0]
 8101514:	69db      	ldr	r3, [r3, #28]
 8101516:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810151a:	2b00      	cmp	r3, #0
 810151c:	d003      	beq.n	8101526 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810151e:	6878      	ldr	r0, [r7, #4]
 8101520:	f000 f887 	bl	8101632 <HAL_TIM_IC_CaptureCallback>
 8101524:	e005      	b.n	8101532 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8101526:	6878      	ldr	r0, [r7, #4]
 8101528:	f000 f879 	bl	810161e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810152c:	6878      	ldr	r0, [r7, #4]
 810152e:	f000 f88a 	bl	8101646 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8101532:	687b      	ldr	r3, [r7, #4]
 8101534:	2200      	movs	r2, #0
 8101536:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8101538:	687b      	ldr	r3, [r7, #4]
 810153a:	681b      	ldr	r3, [r3, #0]
 810153c:	691b      	ldr	r3, [r3, #16]
 810153e:	f003 0301 	and.w	r3, r3, #1
 8101542:	2b01      	cmp	r3, #1
 8101544:	d10e      	bne.n	8101564 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8101546:	687b      	ldr	r3, [r7, #4]
 8101548:	681b      	ldr	r3, [r3, #0]
 810154a:	68db      	ldr	r3, [r3, #12]
 810154c:	f003 0301 	and.w	r3, r3, #1
 8101550:	2b01      	cmp	r3, #1
 8101552:	d107      	bne.n	8101564 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8101554:	687b      	ldr	r3, [r7, #4]
 8101556:	681b      	ldr	r3, [r3, #0]
 8101558:	f06f 0201 	mvn.w	r2, #1
 810155c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 810155e:	6878      	ldr	r0, [r7, #4]
 8101560:	f7fe ff58 	bl	8100414 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8101564:	687b      	ldr	r3, [r7, #4]
 8101566:	681b      	ldr	r3, [r3, #0]
 8101568:	691b      	ldr	r3, [r3, #16]
 810156a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810156e:	2b80      	cmp	r3, #128	; 0x80
 8101570:	d10e      	bne.n	8101590 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8101572:	687b      	ldr	r3, [r7, #4]
 8101574:	681b      	ldr	r3, [r3, #0]
 8101576:	68db      	ldr	r3, [r3, #12]
 8101578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810157c:	2b80      	cmp	r3, #128	; 0x80
 810157e:	d107      	bne.n	8101590 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8101580:	687b      	ldr	r3, [r7, #4]
 8101582:	681b      	ldr	r3, [r3, #0]
 8101584:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8101588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 810158a:	6878      	ldr	r0, [r7, #4]
 810158c:	f000 f914 	bl	81017b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8101590:	687b      	ldr	r3, [r7, #4]
 8101592:	681b      	ldr	r3, [r3, #0]
 8101594:	691b      	ldr	r3, [r3, #16]
 8101596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810159a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810159e:	d10e      	bne.n	81015be <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 81015a0:	687b      	ldr	r3, [r7, #4]
 81015a2:	681b      	ldr	r3, [r3, #0]
 81015a4:	68db      	ldr	r3, [r3, #12]
 81015a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81015aa:	2b80      	cmp	r3, #128	; 0x80
 81015ac:	d107      	bne.n	81015be <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 81015ae:	687b      	ldr	r3, [r7, #4]
 81015b0:	681b      	ldr	r3, [r3, #0]
 81015b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 81015b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 81015b8:	6878      	ldr	r0, [r7, #4]
 81015ba:	f000 f907 	bl	81017cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 81015be:	687b      	ldr	r3, [r7, #4]
 81015c0:	681b      	ldr	r3, [r3, #0]
 81015c2:	691b      	ldr	r3, [r3, #16]
 81015c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81015c8:	2b40      	cmp	r3, #64	; 0x40
 81015ca:	d10e      	bne.n	81015ea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 81015cc:	687b      	ldr	r3, [r7, #4]
 81015ce:	681b      	ldr	r3, [r3, #0]
 81015d0:	68db      	ldr	r3, [r3, #12]
 81015d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81015d6:	2b40      	cmp	r3, #64	; 0x40
 81015d8:	d107      	bne.n	81015ea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 81015da:	687b      	ldr	r3, [r7, #4]
 81015dc:	681b      	ldr	r3, [r3, #0]
 81015de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 81015e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 81015e4:	6878      	ldr	r0, [r7, #4]
 81015e6:	f000 f838 	bl	810165a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 81015ea:	687b      	ldr	r3, [r7, #4]
 81015ec:	681b      	ldr	r3, [r3, #0]
 81015ee:	691b      	ldr	r3, [r3, #16]
 81015f0:	f003 0320 	and.w	r3, r3, #32
 81015f4:	2b20      	cmp	r3, #32
 81015f6:	d10e      	bne.n	8101616 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 81015f8:	687b      	ldr	r3, [r7, #4]
 81015fa:	681b      	ldr	r3, [r3, #0]
 81015fc:	68db      	ldr	r3, [r3, #12]
 81015fe:	f003 0320 	and.w	r3, r3, #32
 8101602:	2b20      	cmp	r3, #32
 8101604:	d107      	bne.n	8101616 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8101606:	687b      	ldr	r3, [r7, #4]
 8101608:	681b      	ldr	r3, [r3, #0]
 810160a:	f06f 0220 	mvn.w	r2, #32
 810160e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8101610:	6878      	ldr	r0, [r7, #4]
 8101612:	f000 f8c7 	bl	81017a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8101616:	bf00      	nop
 8101618:	3708      	adds	r7, #8
 810161a:	46bd      	mov	sp, r7
 810161c:	bd80      	pop	{r7, pc}

0810161e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 810161e:	b480      	push	{r7}
 8101620:	b083      	sub	sp, #12
 8101622:	af00      	add	r7, sp, #0
 8101624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8101626:	bf00      	nop
 8101628:	370c      	adds	r7, #12
 810162a:	46bd      	mov	sp, r7
 810162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101630:	4770      	bx	lr

08101632 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8101632:	b480      	push	{r7}
 8101634:	b083      	sub	sp, #12
 8101636:	af00      	add	r7, sp, #0
 8101638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 810163a:	bf00      	nop
 810163c:	370c      	adds	r7, #12
 810163e:	46bd      	mov	sp, r7
 8101640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101644:	4770      	bx	lr

08101646 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8101646:	b480      	push	{r7}
 8101648:	b083      	sub	sp, #12
 810164a:	af00      	add	r7, sp, #0
 810164c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 810164e:	bf00      	nop
 8101650:	370c      	adds	r7, #12
 8101652:	46bd      	mov	sp, r7
 8101654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101658:	4770      	bx	lr

0810165a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 810165a:	b480      	push	{r7}
 810165c:	b083      	sub	sp, #12
 810165e:	af00      	add	r7, sp, #0
 8101660:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8101662:	bf00      	nop
 8101664:	370c      	adds	r7, #12
 8101666:	46bd      	mov	sp, r7
 8101668:	f85d 7b04 	ldr.w	r7, [sp], #4
 810166c:	4770      	bx	lr
	...

08101670 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8101670:	b480      	push	{r7}
 8101672:	b085      	sub	sp, #20
 8101674:	af00      	add	r7, sp, #0
 8101676:	6078      	str	r0, [r7, #4]
 8101678:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 810167a:	687b      	ldr	r3, [r7, #4]
 810167c:	681b      	ldr	r3, [r3, #0]
 810167e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8101680:	687b      	ldr	r3, [r7, #4]
 8101682:	4a40      	ldr	r2, [pc, #256]	; (8101784 <TIM_Base_SetConfig+0x114>)
 8101684:	4293      	cmp	r3, r2
 8101686:	d013      	beq.n	81016b0 <TIM_Base_SetConfig+0x40>
 8101688:	687b      	ldr	r3, [r7, #4]
 810168a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810168e:	d00f      	beq.n	81016b0 <TIM_Base_SetConfig+0x40>
 8101690:	687b      	ldr	r3, [r7, #4]
 8101692:	4a3d      	ldr	r2, [pc, #244]	; (8101788 <TIM_Base_SetConfig+0x118>)
 8101694:	4293      	cmp	r3, r2
 8101696:	d00b      	beq.n	81016b0 <TIM_Base_SetConfig+0x40>
 8101698:	687b      	ldr	r3, [r7, #4]
 810169a:	4a3c      	ldr	r2, [pc, #240]	; (810178c <TIM_Base_SetConfig+0x11c>)
 810169c:	4293      	cmp	r3, r2
 810169e:	d007      	beq.n	81016b0 <TIM_Base_SetConfig+0x40>
 81016a0:	687b      	ldr	r3, [r7, #4]
 81016a2:	4a3b      	ldr	r2, [pc, #236]	; (8101790 <TIM_Base_SetConfig+0x120>)
 81016a4:	4293      	cmp	r3, r2
 81016a6:	d003      	beq.n	81016b0 <TIM_Base_SetConfig+0x40>
 81016a8:	687b      	ldr	r3, [r7, #4]
 81016aa:	4a3a      	ldr	r2, [pc, #232]	; (8101794 <TIM_Base_SetConfig+0x124>)
 81016ac:	4293      	cmp	r3, r2
 81016ae:	d108      	bne.n	81016c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 81016b0:	68fb      	ldr	r3, [r7, #12]
 81016b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81016b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 81016b8:	683b      	ldr	r3, [r7, #0]
 81016ba:	685b      	ldr	r3, [r3, #4]
 81016bc:	68fa      	ldr	r2, [r7, #12]
 81016be:	4313      	orrs	r3, r2
 81016c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 81016c2:	687b      	ldr	r3, [r7, #4]
 81016c4:	4a2f      	ldr	r2, [pc, #188]	; (8101784 <TIM_Base_SetConfig+0x114>)
 81016c6:	4293      	cmp	r3, r2
 81016c8:	d01f      	beq.n	810170a <TIM_Base_SetConfig+0x9a>
 81016ca:	687b      	ldr	r3, [r7, #4]
 81016cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81016d0:	d01b      	beq.n	810170a <TIM_Base_SetConfig+0x9a>
 81016d2:	687b      	ldr	r3, [r7, #4]
 81016d4:	4a2c      	ldr	r2, [pc, #176]	; (8101788 <TIM_Base_SetConfig+0x118>)
 81016d6:	4293      	cmp	r3, r2
 81016d8:	d017      	beq.n	810170a <TIM_Base_SetConfig+0x9a>
 81016da:	687b      	ldr	r3, [r7, #4]
 81016dc:	4a2b      	ldr	r2, [pc, #172]	; (810178c <TIM_Base_SetConfig+0x11c>)
 81016de:	4293      	cmp	r3, r2
 81016e0:	d013      	beq.n	810170a <TIM_Base_SetConfig+0x9a>
 81016e2:	687b      	ldr	r3, [r7, #4]
 81016e4:	4a2a      	ldr	r2, [pc, #168]	; (8101790 <TIM_Base_SetConfig+0x120>)
 81016e6:	4293      	cmp	r3, r2
 81016e8:	d00f      	beq.n	810170a <TIM_Base_SetConfig+0x9a>
 81016ea:	687b      	ldr	r3, [r7, #4]
 81016ec:	4a29      	ldr	r2, [pc, #164]	; (8101794 <TIM_Base_SetConfig+0x124>)
 81016ee:	4293      	cmp	r3, r2
 81016f0:	d00b      	beq.n	810170a <TIM_Base_SetConfig+0x9a>
 81016f2:	687b      	ldr	r3, [r7, #4]
 81016f4:	4a28      	ldr	r2, [pc, #160]	; (8101798 <TIM_Base_SetConfig+0x128>)
 81016f6:	4293      	cmp	r3, r2
 81016f8:	d007      	beq.n	810170a <TIM_Base_SetConfig+0x9a>
 81016fa:	687b      	ldr	r3, [r7, #4]
 81016fc:	4a27      	ldr	r2, [pc, #156]	; (810179c <TIM_Base_SetConfig+0x12c>)
 81016fe:	4293      	cmp	r3, r2
 8101700:	d003      	beq.n	810170a <TIM_Base_SetConfig+0x9a>
 8101702:	687b      	ldr	r3, [r7, #4]
 8101704:	4a26      	ldr	r2, [pc, #152]	; (81017a0 <TIM_Base_SetConfig+0x130>)
 8101706:	4293      	cmp	r3, r2
 8101708:	d108      	bne.n	810171c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 810170a:	68fb      	ldr	r3, [r7, #12]
 810170c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8101710:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8101712:	683b      	ldr	r3, [r7, #0]
 8101714:	68db      	ldr	r3, [r3, #12]
 8101716:	68fa      	ldr	r2, [r7, #12]
 8101718:	4313      	orrs	r3, r2
 810171a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 810171c:	68fb      	ldr	r3, [r7, #12]
 810171e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8101722:	683b      	ldr	r3, [r7, #0]
 8101724:	695b      	ldr	r3, [r3, #20]
 8101726:	4313      	orrs	r3, r2
 8101728:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 810172a:	687b      	ldr	r3, [r7, #4]
 810172c:	68fa      	ldr	r2, [r7, #12]
 810172e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8101730:	683b      	ldr	r3, [r7, #0]
 8101732:	689a      	ldr	r2, [r3, #8]
 8101734:	687b      	ldr	r3, [r7, #4]
 8101736:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8101738:	683b      	ldr	r3, [r7, #0]
 810173a:	681a      	ldr	r2, [r3, #0]
 810173c:	687b      	ldr	r3, [r7, #4]
 810173e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8101740:	687b      	ldr	r3, [r7, #4]
 8101742:	4a10      	ldr	r2, [pc, #64]	; (8101784 <TIM_Base_SetConfig+0x114>)
 8101744:	4293      	cmp	r3, r2
 8101746:	d00f      	beq.n	8101768 <TIM_Base_SetConfig+0xf8>
 8101748:	687b      	ldr	r3, [r7, #4]
 810174a:	4a12      	ldr	r2, [pc, #72]	; (8101794 <TIM_Base_SetConfig+0x124>)
 810174c:	4293      	cmp	r3, r2
 810174e:	d00b      	beq.n	8101768 <TIM_Base_SetConfig+0xf8>
 8101750:	687b      	ldr	r3, [r7, #4]
 8101752:	4a11      	ldr	r2, [pc, #68]	; (8101798 <TIM_Base_SetConfig+0x128>)
 8101754:	4293      	cmp	r3, r2
 8101756:	d007      	beq.n	8101768 <TIM_Base_SetConfig+0xf8>
 8101758:	687b      	ldr	r3, [r7, #4]
 810175a:	4a10      	ldr	r2, [pc, #64]	; (810179c <TIM_Base_SetConfig+0x12c>)
 810175c:	4293      	cmp	r3, r2
 810175e:	d003      	beq.n	8101768 <TIM_Base_SetConfig+0xf8>
 8101760:	687b      	ldr	r3, [r7, #4]
 8101762:	4a0f      	ldr	r2, [pc, #60]	; (81017a0 <TIM_Base_SetConfig+0x130>)
 8101764:	4293      	cmp	r3, r2
 8101766:	d103      	bne.n	8101770 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8101768:	683b      	ldr	r3, [r7, #0]
 810176a:	691a      	ldr	r2, [r3, #16]
 810176c:	687b      	ldr	r3, [r7, #4]
 810176e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8101770:	687b      	ldr	r3, [r7, #4]
 8101772:	2201      	movs	r2, #1
 8101774:	615a      	str	r2, [r3, #20]
}
 8101776:	bf00      	nop
 8101778:	3714      	adds	r7, #20
 810177a:	46bd      	mov	sp, r7
 810177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101780:	4770      	bx	lr
 8101782:	bf00      	nop
 8101784:	40010000 	.word	0x40010000
 8101788:	40000400 	.word	0x40000400
 810178c:	40000800 	.word	0x40000800
 8101790:	40000c00 	.word	0x40000c00
 8101794:	40010400 	.word	0x40010400
 8101798:	40014000 	.word	0x40014000
 810179c:	40014400 	.word	0x40014400
 81017a0:	40014800 	.word	0x40014800

081017a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 81017a4:	b480      	push	{r7}
 81017a6:	b083      	sub	sp, #12
 81017a8:	af00      	add	r7, sp, #0
 81017aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 81017ac:	bf00      	nop
 81017ae:	370c      	adds	r7, #12
 81017b0:	46bd      	mov	sp, r7
 81017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017b6:	4770      	bx	lr

081017b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 81017b8:	b480      	push	{r7}
 81017ba:	b083      	sub	sp, #12
 81017bc:	af00      	add	r7, sp, #0
 81017be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 81017c0:	bf00      	nop
 81017c2:	370c      	adds	r7, #12
 81017c4:	46bd      	mov	sp, r7
 81017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017ca:	4770      	bx	lr

081017cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 81017cc:	b480      	push	{r7}
 81017ce:	b083      	sub	sp, #12
 81017d0:	af00      	add	r7, sp, #0
 81017d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 81017d4:	bf00      	nop
 81017d6:	370c      	adds	r7, #12
 81017d8:	46bd      	mov	sp, r7
 81017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017de:	4770      	bx	lr

081017e0 <__libc_init_array>:
 81017e0:	b570      	push	{r4, r5, r6, lr}
 81017e2:	4d0d      	ldr	r5, [pc, #52]	; (8101818 <__libc_init_array+0x38>)
 81017e4:	4c0d      	ldr	r4, [pc, #52]	; (810181c <__libc_init_array+0x3c>)
 81017e6:	1b64      	subs	r4, r4, r5
 81017e8:	10a4      	asrs	r4, r4, #2
 81017ea:	2600      	movs	r6, #0
 81017ec:	42a6      	cmp	r6, r4
 81017ee:	d109      	bne.n	8101804 <__libc_init_array+0x24>
 81017f0:	4d0b      	ldr	r5, [pc, #44]	; (8101820 <__libc_init_array+0x40>)
 81017f2:	4c0c      	ldr	r4, [pc, #48]	; (8101824 <__libc_init_array+0x44>)
 81017f4:	f000 f818 	bl	8101828 <_init>
 81017f8:	1b64      	subs	r4, r4, r5
 81017fa:	10a4      	asrs	r4, r4, #2
 81017fc:	2600      	movs	r6, #0
 81017fe:	42a6      	cmp	r6, r4
 8101800:	d105      	bne.n	810180e <__libc_init_array+0x2e>
 8101802:	bd70      	pop	{r4, r5, r6, pc}
 8101804:	f855 3b04 	ldr.w	r3, [r5], #4
 8101808:	4798      	blx	r3
 810180a:	3601      	adds	r6, #1
 810180c:	e7ee      	b.n	81017ec <__libc_init_array+0xc>
 810180e:	f855 3b04 	ldr.w	r3, [r5], #4
 8101812:	4798      	blx	r3
 8101814:	3601      	adds	r6, #1
 8101816:	e7f2      	b.n	81017fe <__libc_init_array+0x1e>
 8101818:	08101850 	.word	0x08101850
 810181c:	08101850 	.word	0x08101850
 8101820:	08101850 	.word	0x08101850
 8101824:	08101854 	.word	0x08101854

08101828 <_init>:
 8101828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810182a:	bf00      	nop
 810182c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810182e:	bc08      	pop	{r3}
 8101830:	469e      	mov	lr, r3
 8101832:	4770      	bx	lr

08101834 <_fini>:
 8101834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8101836:	bf00      	nop
 8101838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810183a:	bc08      	pop	{r3}
 810183c:	469e      	mov	lr, r3
 810183e:	4770      	bx	lr
